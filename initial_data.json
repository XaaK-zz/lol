[
 {"pk": 1,  "model": "lol.language", "fields": {"name": "php",          "language_class": "lang-php"}},
 {"pk": 2,  "model": "lol.language", "fields": {"name": "C++",          "language_class": "lang-cpp"}},
 {"pk": 3,  "model": "lol.language", "fields": {"name": "C",            "language_class": "lang-c"}},
 {"pk": 4,  "model": "lol.language", "fields": {"name": "JavaScript",   "language_class": "lang-js"}},
 {"pk": 5,  "model": "lol.language", "fields": {"name": "Perl",         "language_class": "lang-perl"}},
 {"pk": 6,  "model": "lol.language", "fields": {"name": "Java",         "language_class": "lang-java"}},
 {"pk": 7,  "model": "lol.language", "fields": {"name": "Objective-C",  "language_class": "lang-m"}},
 {"pk": 8,  "model": "lol.language", "fields": {"name": "C#",           "language_class": "lang-cs"}},
 {"pk": 9,  "model": "lol.language", "fields": {"name": "Python",       "language_class": "lang-py"}},
 {"pk": 10, "model": "lol.language", "fields": {"name": "Visual Basic", "language_class": "lang-vb"}},
 {"pk": 11, "model": "lol.language", "fields": {"name": "Ruby",         "language_class": "lang-rb"}},
 {"pk": 12, "model": "lol.language", "fields": {"name": "Lisp",         "language_class": "lang-lisp"}},
 {"pk": 13, "model": "lol.language", "fields": {"name": "Pascal",       "language_class": "lang-pascal"}},
 {"pk": 14, "model": "lol.language", "fields": {"name": "T-SQL",        "language_class": "lang-sql"}},
 {"pk": 15, "model": "lol.language", "fields": {"name": "Bash",         "language_class": "lang-sh"}},
 {"pk": 16, "model": "lol.language", "fields": {"name": "MATLAB",       "language_class": "lang-matlab"}},
 {"pk": 17, "model": "lol.language", "fields": {"name": "Ada",          "language_class": "lang-ada"}},
 {"pk": 18, "model": "lol.language", "fields": {"name": "Haskell",      "language_class": "lang-hs"}},
  
 
 {"pk": 1,  "model": "lol.snippet", "fields": {"language": 1,  "leet": 0, "approved": true, "code_hash":1,"code": "<html>\r\n  <head>\r\n    <title><?= 'Fibonacci numbers' ?></title>\r\n\r\n    <?php\r\n      // PHP has a plethora of comment types\r\n      /* What is a\r\n         \"plethora\"? */\r\n      function fib($n) {\r\n        # I don't know.\r\n        $a = 1;\r\n        $b = 1;\r\n        while (--$n >= 0) {\r\n          echo \"$a\\n\";\r\n          $tmp = $a;\r\n          $a += $b;\r\n          $b = $tmp;\r\n        }\r\n      }\r\n    ?>\r\n  </head>\r\n  <body>\r\n    <?= fib(10) ?>\r\n  </body>\r\n</html>", "description": "php fib", "lame": 0, "gist_id": -1}},
 {"pk": 2,  "model": "lol.snippet", "fields": {"language": 2,  "leet": 0, "approved": true, "code_hash":2,"code": "#include <iostream>\r\n\r\nusing namespace std;\r\n\r\n//! fibonacci numbers with gratuitous use of templates.\r\n//! \\param n an index into the fibonacci series\r\n//! \\param fib0 element 0 of the series\r\n//! \\return the nth element of the fibonacci series\r\ntemplate <class T>\r\nT fib(unsigned int n, const T& fib0) {\r\n  T a(fib0), b(fib0);\r\n  for (; n; --n) {\r\n    T tmp(a);\r\n    a += b;\r\n    b = tmp;\r\n  }\r\n  return a;\r\n}\r\n\r\nint main(int argc, char **argv) {\r\n  cout << fib(10, 1U);\r\n}", "description": "C++ Fib", "lame": 0, "gist_id": -1}},
 {"pk": 3,  "model": "lol.snippet", "fields": {"language": 3,  "leet": 0, "approved": true, "code_hash":3,"code": "#include <stdio.h>\r\n\r\n/* the n-th fibonacci number.\r\n */\r\nunsigned int fib(unsigned int n) {\r\n  unsigned int a = 1, b = 1;\r\n  unsigned int tmp;\r\n  while (--n >= 0) {\r\n    tmp = a;\r\n    a += b;\r\n    b = tmp;\r\n  }\r\n  return a;\r\n}\r\n\r\nmain() {\r\n  printf(\"%u\", fib(10));\r\n}", "description": "C Fib", "lame": 0, "gist_id": -1}},
 {"pk": 4,  "model": "lol.snippet", "fields": {"language": 4,  "leet": 0, "approved": true, "code_hash":4,"code": "/**\r\n * nth element in the fibonacci series.\r\n * @param n >= 0\r\n * @return the nth element, >= 0.\r\n */\r\nfunction fib(n) {\r\n  var a = 1, b = 1;\r\n  var tmp;\r\n  while (--n >= 0) {\r\n    tmp = a;\r\n    a += b;\r\n    b = tmp;\r\n  }\r\n  return a;\r\n}\r\n\r\ndocument.write(fib(10));", "description": "JavaScript Fib", "lame": 0, "gist_id": -1}},
 {"pk": 5,  "model": "lol.snippet", "fields": {"language": 5,  "leet": 0, "approved": true, "code_hash":5,"code": "#!/usr/bin/perl\r\n\r\nuse strict;\r\nuse integer;\r\n\r\n# the nth element of the fibonacci series\r\n# param n - an int >= 0\r\n# return an int >= 0\r\nsub fib($) {\r\n  my $n = shift, $a = 1, $b = 1;\r\n  ($a, $b) = ($a + $b, $a) until (--$n < 0);\r\n  return $a;\r\n}\r\n\r\nprint fib(10);", "description": "Perl Fib", "lame": 0, "gist_id": -1}},
 {"pk": 6,  "model": "lol.snippet", "fields": {"language": 6,  "leet": 0, "approved": true, "code_hash":6,"code": "package foo;\r\n\r\nimport java.util.Iterator;\r\n\r\n/**\r\n * the fibonacci series implemented as an Iterable.\r\n */\r\npublic final class Fibonacci implements Iterable<Integer> {\r\n  /** the next and previous members of the series. */\r\n  private int a = 1, b = 1;\r\n\r\n  @Override\r\n  public Iterator<Integer> iterator() {\r\n    return new Iterator<Integer>() {\r\n      /** the series is infinite. */\r\n      public boolean hasNext() { return true; }\r\n      public Integer next() {\r\n        int tmp = a;\r\n        a += b;\r\n        b = tmp;\r\n        return a;\r\n      }\r\n      public void remove() { throw new UnsupportedOperationException(); }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * the n<sup>th</sup> element of the given series.\r\n   * @throws NoSuchElementException if there are less than n elements in the\r\n   *   given Iterable's {@link Iterable#iterator iterator}.\r\n   */\r\n  public static <T>\r\n  T nth(int n, Iterable<T> iterable) {\r\n    Iterator<? extends T> it = iterable.iterator();\r\n    while (--n > 0) {\r\n      it.next();\r\n    }\r\n    return it.next();\r\n  }\r\n\r\n  public static void main(String[] args) {\r\n    System.out.print(nth(10, new Fibonacci()));\r\n  }\r\n}", "description": "Java Fib", "lame": 0, "gist_id": -1}},
 {"pk": 7,  "model": "lol.snippet", "fields": {"language": 7,  "leet": 0, "approved": true, "code_hash":7,"code": "    #import \"DotView.h\"\r\n\r\n    @implementation DotView\r\n\r\n    - init\r\n    {\r\n        if(![super init]) return nil;\r\n\r\n        // Let x and y initially run between -1 and 1.\r\n        [self setDrawSize:2.0 :2.0];\r\n        [self setDrawOrigin:-1.0 :-1.0];\r\n\r\n        // Set initial dot position.\r\n        dot_position.x = dot_position.y = 0.0;\r\n        return self;\r\n    }", "description": "Obj-C Test", "lame": 0, "gist_id": -1}},
 {"pk": 8,  "model": "lol.snippet", "fields": {"language": 8,  "leet": 0, "approved": true, "code_hash":8,"code": "// Read the file as one string.\r\nSystem.IO.StreamReader myFile =\r\n   new System.IO.StreamReader(\"c:\\\\test.txt\");\r\nstring myString = myFile.ReadToEnd();\r\n\r\nmyFile.Close();\r\n\r\n// Display the file contents.\r\nConsole.WriteLine(myString);\r\n// Suspend the screen.\r\nConsole.ReadLine();", "description": "C# Test",  "lame": 0, "gist_id": -1}},
 {"pk": 9,  "model": "lol.snippet", "fields": {"language": 9,  "leet": 0, "approved": true, "code_hash":9,"code": "#!/usr/bin/python2.4\r\n\r\ndef fib():\r\n  '''\r\n  a generator that produces the elements of the fibonacci series\r\n  '''\r\n\r\n  a = 1\r\n  b = 1\r\n  while True:\r\n    a, b = a + b, a\r\n    yield a\r\n\r\ndef nth(series, n):\r\n  '''\r\n  returns the nth element of a series,\r\n  consuming the earlier elements of the series\r\n  '''\r\n\r\n  for x in series:\r\n    n = n - 1\r\n    if n <= 0: return x\r\n\r\nprint nth(fib(), 10)", "description": "python fib",  "lame": 0, "gist_id": -1}},
 {"pk": 10, "model": "lol.snippet", "fields": {"language": 10, "leet": 0, "approved": true, "code_hash":10,"code": "' Visual Basic\r\nPrivate Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load\r\n   'Put user code to initialize the page here\r\n   If Not IsPostBack Then\r\n      OleDbDataAdapter1.Fill(DsCategories1)\r\n      DataGrid1.DataBind()\r\n   End If\r\nEnd Sub", "description": "VB Test", "lame": 0, "gist_id": -1}},
 {"pk": 11, "model": "lol.snippet", "fields": {"language": 11, "leet": 0, "approved": true, "code_hash":11,"code": "def fib(n)\r\n  return n if n < 2\r\n  vals = [0, 1]\r\n  (n-1).times do \r\n    vals.push(vals[-1] + vals[-2]) \r\n  end\r\n  return vals.last\r\nend", "description": "Ruby Fib",  "lame": 0, "gist_id": -1}},
 {"pk": 12, "model": "lol.snippet", "fields": {"language": 12, "leet": 0, "approved": true, "code_hash":12,"code": "; -*- mode: lisp -*-\r\n\r\n(defun back-six-lines () (interactive) (forward-line -6))\r\n(defun forward-six-lines () (interactive) (forward-line 6))\r\n\r\n(global-set-key \"\\M-l\" 'goto-line)\r\n(global-set-key \"\\C-z\" 'advertised-undo)\r\n(global-set-key [C-insert] 'clipboard-kill-ring-save)\r\n(global-set-key [S-insert] 'clipboard-yank)\r\n(global-set-key [C-up] 'back-six-lines)\r\n(global-set-key [C-down] 'forward-six-lines)\r\n\r\n(setq visible-bell t)\r\n(setq user-mail-address \"foo@bar.com\")\r\n(setq default-major-mode 'text-mode)\r\n\r\n(setenv \"TERM\" \"emacs\")\r\n(c-set-offset 'case-label 2)\r\n(setq c-basic-offset 2)\r\n(setq perl-indent-level 0x2)\r\n(setq delete-key-deletes-forward t)\r\n(setq indent-tabs-mode nil)\r\n\r\n;; Text mode\r\n(add-hook 'text-mode-hook \r\n  '(lambda ()\r\n     (turn-on-auto-fill)\r\n   )\r\n)\r\n\r\n;; Fundamental mode\r\n(add-hook 'fundamental-mode-hook \r\n  '(lambda ()\r\n     (turn-on-auto-fill)\r\n   )\r\n)\r\n\r\n;; Define and cond are keywords in scheme\r\n(define (sqt x) (sqrt-iter 1.0 2.0 x))", "description": "Lisp Test",  "lame": 0, "gist_id": -1}},
 {"pk": 13, "model": "lol.snippet", "fields": {"language": 13, "leet": 0, "approved": true, "code_hash":13,"code": "program Fibonacci;\r\n\r\nvar\r\n  i, x, m, n : integer;\r\n\r\nbegin   {Begins the main part}\r\n\r\n  writeln ('Enter the lenghts of the sequence');\r\n  readln (x);\r\n  n := 0; m:=1; {We have to initialize our sequence}\r\n  writeln (n);  {and have the first output}\r\n  writeln (m);\r\n  i:=0;         {\"i\" is the number of the current iteration}\r\n\r\n\r\nwhile i<x-2 do  {The first 2 \"x's\" we've already had\r\n                 that's why we must get rid of them}\r\n\r\nbegin           {Begins the iteration loop}\r\n\r\n  i:=i+1;\r\n  m:=m+n; n:=m-n;\r\n  writeln(m);\r\n\r\n  if i=x-2 then writeln('Finished !');\r\n\r\n                {The program has calculated everything\r\n                 and lets us know about it}\r\n\r\nend;            {The end of the while-do loop}\r\n\r\n  readln;       {This is needed to have enough time\r\n                 to read the output}\r\n\r\nend.", "description": "Pascal Fib",  "lame": 0, "gist_id": -1}},
 {"pk": 14, "model": "lol.snippet", "fields": {"language": 14, "leet": 0, "approved": true, "code_hash":14,"code": "/* A multi-line\r\n * comment */\r\n'Another string /* Isn\\'t a comment',\r\n\"A string */\"\r\n-- A line comment\r\nSELECT * FROM users WHERE id IN (1, 2.0, +30e-1);\r\n-- keywords are case-insensitive.\r\n-- Note: user-table is a single identifier, not a pair of keywords\r\nselect * from user-table where id in (x, y, z);", "description": "SQL Fib",  "lame": 0, "gist_id": -1}},
 {"pk": 15, "model": "lol.snippet", "fields": {"language": 15, "leet": 0, "approved": true, "code_hash":15,"code": "#!/bin/bash\r\n\r\n# Fibonacci numbers\r\n# Writes an infinite series to stdout, one entry per line\r\nfunction fib() {\r\n  local a=1\r\n  local b=1\r\n  while true ; do\r\n    echo $a\r\n    local tmp=$a\r\n    a=$(( $a + $b ))\r\n    b=$tmp\r\n  done\r\n}\r\n\r\n# output the 10th element of the series and halt\r\nfib | /usr/bin/*head -10 | tail -1 ", "description": "fib seq", "lame": 0, "gist_id": -1}},
 {"pk": 16, "model": "lol.snippet", "fields": {"language": 16, "leet": 0, "approved": true, "code_hash":16,"code": "function result = iseven(n)\r\n% tests if a scalar value is an even integer, works\r\n% for either numeric or vpi inputs\r\nif isnumeric(n)\r\n  result = (mod(n,2) == 0);\r\nelseif isa(n,'vpi')\r\n  % must have been a vpi\r\n  result = (mod(trailingdigit(n,1),2) == 0);\r\nelse\r\n  error('n must be either numeric or vpi')\r\nend", "description": "MATLAB Fib",  "lame": 0, "gist_id": -1}},
 {"pk": 17, "model": "lol.snippet", "fields": {"language": 18, "leet": 0, "approved": true, "code_hash":17,"code": "-- A comment\r\nNot(--\"a comment\")\r\nAlso.not(--(A.comment))\r\n\r\nmodule Foo(bar) where\r\nimport Blah\r\nimport BlahBlah(blah)\r\nimport Monads(Exception(..), FIO(..),unFIO,handle,runFIO,fixFIO,fio,\r\n              write,writeln,HasNext(..),HasOutput(..))\r\n\r\n{- nested comments\r\n - don't work {-yet-} -}\r\ninstance Thingy Foo where\r\n  a = b\r\n\r\ndata Foo :: (* -> * -> *) -> * > * -> * where\r\n  Nil :: Foo a b c\r\n  Cons :: a b c -> Foo abc -> Foo a b c\r\n\r\nstr = \"Foo\\\\Bar\"\r\nchar = 'x'\r\nNot.A.Char = 'too long'  -- Don't barf.  Show that 't is a lexical error.\r\n\r\n(ident, ident', Fo''o.b'ar)\r\n\r\n(0, 12, 0x45, 0xA7, 0o177, 0O377, 0.1, 1.0, 1e3, 0.5E-3, 1.0E+45)", "description": "Haskell Test",  "lame": 0, "gist_id": -1}},
 {"pk": 18, "model": "lol.snippet", "fields": {"language": 17, "leet": 0, "approved": true, "code_hash":18,"code": " type Integer_Type is range 0 .. 999_999_999_999_999_999;\r\n\r\n  function Fib (N : Integer_Type) return Integer_Type is\r\n     U : Integer_Type := 0;\r\n     V : Integer_Type := 1;\r\n  begin\r\n     for I in  2 .. N loop\r\n        Calculate_Next : declare\r\n           T : constant Integer_Type := U + V;\r\n        begin\r\n           U := V;\r\n           V := T;\r\n        end Calculate_Next;\r\n     end loop;\r\n     return V;\r\n  end Fib;", "description": "Ada Fib",  "lame": 0, "gist_id": -1}}
 
 ]
