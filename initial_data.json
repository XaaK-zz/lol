[{"pk": 1, "model": "lol.language", "fields": {"active": true, "name": "php", "language_class": "lang-php"}}, {"pk": 2, "model": "lol.language", "fields": {"active": true, "name": "C/C++", "language_class": "lang-cpp"}}, {"pk": 4, "model": "lol.language", "fields": {"active": true, "name": "JavaScript", "language_class": "lang-js"}}, {"pk": 5, "model": "lol.language", "fields": {"active": false, "name": "Perl", "language_class": "lang-perl"}}, {"pk": 6, "model": "lol.language", "fields": {"active": true, "name": "Java", "language_class": "lang-java"}}, {"pk": 7, "model": "lol.language", "fields": {"active": false, "name": "Objective-C", "language_class": "lang-m"}}, {"pk": 8, "model": "lol.language", "fields": {"active": true, "name": "C#", "language_class": "lang-cs"}}, {"pk": 9, "model": "lol.language", "fields": {"active": true, "name": "Python", "language_class": "lang-py"}}, {"pk": 10, "model": "lol.language", "fields": {"active": false, "name": "Visual Basic", "language_class": "lang-vb"}}, {"pk": 11, "model": "lol.language", "fields": {"active": false, "name": "Ruby", "language_class": "lang-rb"}}, {"pk": 12, "model": "lol.language", "fields": {"active": false, "name": "Lisp", "language_class": "lang-lisp"}}, {"pk": 13, "model": "lol.language", "fields": {"active": false, "name": "Pascal", "language_class": "lang-pascal"}}, {"pk": 14, "model": "lol.language", "fields": {"active": false, "name": "T-SQL", "language_class": "lang-sql"}}, {"pk": 15, "model": "lol.language", "fields": {"active": false, "name": "Bash", "language_class": "lang-sh"}}, {"pk": 16, "model": "lol.language", "fields": {"active": false, "name": "MATLAB", "language_class": "lang-matlab"}}, {"pk": 17, "model": "lol.language", "fields": {"active": false, "name": "Ada", "language_class": "lang-ada"}}, {"pk": 18, "model": "lol.language", "fields": {"active": true, "name": "Haskell", "language_class": "lang-hs"}}, {"pk": 22, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "static u32 encode_float(u64 value)\r\n{\r\n\tunsigned exp = 190;\r\n\tunsigned u;\r\n\r\n\tif (value==0) return 0;\r\n\twhile ((s64)value > 0){\r\n\t\tvalue <<= 1;\r\n\t\texp--;\r\n        }\r\n\tu = (u32)(value >> 40) & 0x7fffffu;\r\n\treturn u | (exp << 23);\r\n}", "attribution": "From Linux source", "description": "Encode an u64 into a 32 bit IEEE float.", "language": 2, "lame": 0, "submitDate": "2013-03-17T18:12:59.434Z", "code_hash": "69069d8d44b322e3b141278121fc734ed4047626", "approved": true}}, {"pk": 23, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "const char* boyer_moore_strnstr(const char *s, const char *find, const size_t s_len, const size_t f_len, const size_t skip_lookup[]) {\r\n    size_t i;\r\n    size_t pos = 0;\r\n\r\n    /* It's impossible to match a larger string */\r\n    if (f_len > s_len) {\r\n        return NULL;\r\n    }\r\n\r\n    while (pos <= (s_len - f_len)) {\r\n        for (i = f_len - 1; s[pos + i] == find[i]; i--) {\r\n            if (i == 0) {\r\n                return &(s[pos]);\r\n            }\r\n        }\r\n        pos += skip_lookup[(unsigned char)s[pos + f_len - 1]];\r\n    }\r\n\r\n    return NULL;\r\n}", "attribution": "From https://github.com/ggreer/the_silver_searcher/blob/master/src/util.c", "description": "Boyer-Moore-Horspool strstr", "language": 2, "lame": 0, "submitDate": "2013-03-17T18:13:08.971Z", "code_hash": "edbbe6b535efd5a3ec4af28ea3a3ed4ad5380677", "approved": true}}, {"pk": 24, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "int binary_search(const char* needle, char **haystack, int start, int end) {\r\n    int mid;\r\n    int rc;\r\n\r\n    if (start == end) {\r\n        return -1;\r\n    }\r\n\r\n    mid = (start + end) / 2; /* can screw up on arrays with > 2 billion elements */\r\n\r\n    rc = strcmp(needle, haystack[mid]);\r\n    if (rc < 0) {\r\n        return binary_search(needle, haystack, start, mid);\r\n    } else if (rc > 0) {\r\n        return binary_search(needle, haystack, mid + 1, end);\r\n    }\r\n\r\n    return mid;\r\n}", "attribution": "", "description": "Binary Search in C", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:34:45.331Z", "code_hash": "79e5c87a600bfac8fdc39edf58c4eb15aa2156c5", "approved": true}}, {"pk": 25, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "int is_lowercase(const char* s) {\r\n    int i;\r\n    for (i = 0; s[i] != '\\0'; i++) {\r\n        if (!isascii(s[i]) || isupper(s[i])) {\r\n            return FALSE;\r\n        }\r\n    }\r\n    return TRUE;\r\n}", "attribution": "", "description": "Lowercase test", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:35:10.391Z", "code_hash": "6b3147855f9e23637404e3e4ac2803cd8516fd0f", "approved": true}}, {"pk": 26, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "int is_directory(const char *path, const struct dirent *d) {\r\n#ifdef HAVE_DIRENT_DTYPE\r\n    /* Some filesystems, e.g. ReiserFS, always return a type DT_UNKNOWN from readdir or scandir. */\r\n    /* Call stat if we don't find DT_DIR to get the information we need. */\r\n    /* Also works for symbolic links to directories. */\r\n    if (d->d_type == DT_DIR) {\r\n        return TRUE;\r\n    }\r\n#endif\r\n    char *full_path;\r\n    struct stat s;\r\n    ag_asprintf(&full_path, \"%s/%s\", path, d->d_name);\r\n    if (stat(full_path, &s) != 0) {\r\n        free(full_path);\r\n        return FALSE;\r\n    }\r\n    free(full_path);\r\n    return (S_ISDIR(s.st_mode));\r\n}", "attribution": "", "description": "Is Directory Test", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:35:34.065Z", "code_hash": "1f778a33327a5261ef3611335f9006cec013f568", "approved": true}}, {"pk": 27, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "float array_sum (float myNumbers[],int size)\r\n{\r\n    float sum = 0;\r\n    int i; /* Variable used in loop counter */\r\n\r\n    for (i = 0; i < size; ++i)\r\n    {\r\n        sum +=myNumbers[i];\r\n    }\r\n}", "attribution": "Stackoverflow", "description": "Sum array of floats.", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:36:10.757Z", "code_hash": "93c6a67bcefbf4d00dfac91c02fdefb03d5fc256", "approved": true}}, {"pk": 28, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "float array_average (float myNumbers[],int size)\r\n{\r\n    float sum = 0;\r\n    float average = 0;\r\n    int i; /* Variable used in loop counter */\r\n\r\n    for (i = 0; i < size; ++i)\r\n    {\r\n        sum +=myNumbers[i];\r\n    }\r\n\r\n    average = sum/size;\r\n    printf(\"avg = %5.2f\", average);\r\n}", "attribution": "stackoverflow.com", "description": "Average an array of floats", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:36:47.784Z", "code_hash": "850aba46ad6c9ddb60e1dc2ee837851f79869e1d", "approved": true}}, {"pk": 29, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "int add(int x, int y) {\r\n    int a, b;\r\n    do {\r\n        a = x & y;\r\n        b = x ^ y;\r\n        x = a << 1;\r\n        y = b;\r\n    } while (a);\r\n    return b;\r\n}", "attribution": "http://stackoverflow.com/questions/11694546/divide-a-number-by-3-without-using-operators", "description": "Add without using the plus sign", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:38:10.668Z", "code_hash": "f6aebf764a92633b3289508432caf114b1341aa3", "approved": true}}, {"pk": 30, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// replaces the + operator\r\nint add(int x, int y) {\r\n    int a, b;\r\n    do {\r\n        a = x & y;\r\n        b = x ^ y;\r\n        x = a << 1;\r\n        y = b;\r\n    } while (a);\r\n    return b;\r\n}\r\n\r\nint divideby3 (int num) {\r\n    int sum = 0;\r\n    while (num > 3) {\r\n        sum = add(num >> 2, sum);\r\n        num = add(num >> 2, num & 3);\r\n    }\r\n    if (num == 3)\r\n        sum = add(sum, 1);\r\n    return sum; \r\n}", "attribution": "http://stackoverflow.com/questions/11694546/divide-a-number-by-3-without-using-operators", "description": "Divide a number without using operators", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:38:57.675Z", "code_hash": "7d6581d9424d378ad9181eaa0f2c680cf12c58d6", "approved": true}}, {"pk": 31, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "void fn0() {\r\n  int f1 = 1;\r\n  int f2 = 2;\r\n  int sum = 0;\r\n  while (f2 < 4000000) {\r\n    if (f2 % 2 == 0)\r\n      sum += f2;\r\n    f2 = f1^f2;\r\n    f1 = f1^f2;\r\n    f2 = f1 + (f1^f2);\r\n  }\r\n  printf(\"%d\\n\", sum);\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project euler # 2 - Even Fibonacci numbers", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:40:10.021Z", "code_hash": "fa302f7274a8e860a46376466bb5501d15da74c6", "approved": true}}, {"pk": 32, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <stdio.h>\r\n#include <math.h>\r\n#include <inttypes.h>\r\n\r\nvoid fn0() {\r\n  int64_t number = 600851475143;\r\n  int divisor = 2;\r\n  while (number > 1) {\r\n    if (0 == (number % divisor)) {\r\n      //printf(\"%lld, %d\\n\", number, divisor);\r\n      number /= divisor;\r\n    } else {\r\n      divisor++;\r\n    }\r\n  }\r\n  printf(\"%d\\n\", divisor);\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #3 - Largest prime factor of 600851475143", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:41:24.072Z", "code_hash": "a29f026e608b659100c1fa91625dd961fd15401d", "approved": true}}, {"pk": 33, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <stdio.h>\r\n\r\nvoid fn0() {\r\n  int i;\r\n  int j;\r\n  int val;\r\n  char valasstr[6];\r\n  int max = 99999;\r\n  for (i = 999; i > 100; --i) {\r\n    for (j = 999; j >= i; --j) {\r\n      val = i*j;\r\n      if (val < 1000000 && val > max) {\r\n        sprintf(valasstr, \"%d\", val);\r\n        if (valasstr[0] == valasstr[5] &&\r\n            valasstr[1] == valasstr[4] &&\r\n            valasstr[2] == valasstr[3]) {\r\n          max = val;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  printf(\"%d\\n\", max);\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #4 - Largest palindrome product", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:42:31.427Z", "code_hash": "16b8bbbaf5a374b4223c70360db40624bf65f454", "approved": true}}, {"pk": 34, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <stdio.h>\r\n\r\nint gcd(long int a, long int b) {\r\n  if (b == 0)\r\n    return a;\r\n  return gcd(b, a % b);\r\n}\r\nint lcm(long int a, long int b) {\r\n  return (a * b) / gcd(a, b);\r\n}\r\nvoid fn0() {\r\n  long int i;\r\n  long int val = 1;\r\n  for (i = 2; i < 21; i++)\r\n    val = lcm(val, i);\r\n  printf(\"%d\\n\", val);\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #5 - Smallest multiple", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:43:28.642Z", "code_hash": "106242bcd72be8171cdb8938b8d3458661cc881f", "approved": true}}, {"pk": 35, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <stdio.h>\r\n\r\nvoid fn0() {\r\n  int i;\r\n  long int sumofsq = 0;\r\n  long int sum = 0;\r\n  for (i = 1; i < 101; i++) {\r\n    sumofsq += (i * i);\r\n    sum += i;\r\n  }\r\n  printf(\"%d\\n\", sum * sum - sumofsq);\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #6 - Sum square difference", "language": 2, "lame": 0, "submitDate": "2013-03-17T07:44:04.848Z", "code_hash": "d835685ada61f2289a608e0126768b48eec2d1ae", "approved": true}}, {"pk": 36, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nvoid fn0() {\r\n  int primes[10001] = {2,3,5,7};\r\n  int primesfound = 4;\r\n  int wheel[] = {2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10};\r\n  int wheellen = sizeof(wheel)/sizeof(int);\r\n  int i, j, w, p;\r\n  for (i = 11, w = 0; primesfound < 10001; i+=wheel[w], w=(w+1) % wheellen) {\r\n    p = 1;\r\n    for (j = 0; j < primesfound && (primes[j] * primes[j]) <= i; j++) {\r\n      if (i % primes[j] == 0) {\r\n\tp = 0;\r\n\tbreak;\r\n      }\r\n    }\r\n    if (p) {\r\n      primes[primesfound++] = i;\r\n    }\r\n  }\r\n  printf(\"%d\\n\", primes[10000]);\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #7 - 10001st prime", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:15:05.978Z", "code_hash": "e7cb62f618234980bb5f21b13be3179c64a95832", "approved": true}}, {"pk": 37, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <stdio.h>\r\n\r\nvoid fn0() {\r\n  int i, j, prod;\r\n  char str[] = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\";\r\n  int max = 0;\r\n  for (i = 0; i < (sizeof(str)/sizeof(char))-5; i++) {\r\n    prod = 1;\r\n    for (j = 0; j < 5; j++) {\r\n      prod *= (str[i+j] - '0');\r\n    }\r\n    if (prod > max) {\r\n      max = prod;\r\n    }\r\n  }\r\n  printf(\"%d\\n\", max);\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #8 - Largest product in a series", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:16:02.081Z", "code_hash": "f23c5b4e233ddb32a1c76344cb7c064534d12c53", "approved": true}}, {"pk": 38, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nvoid fn0() {\r\n  int a = 100;\r\n  int b = 100;\r\n  while (1) {\r\n    if (b > a) {\r\n      b = 100;\r\n      a += 1;\r\n    }\r\n    double c = sqrt(a * a + b * b);\r\n    if (fmod(c, 1.0) == 0 && a + b + (int)c == 1000) {\r\n      printf(\"%d\\n\",  a * b * (int)c);\r\n      return;\r\n    }\r\n    b += 1;\r\n  }\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #9 - Special Pythagorean triplet", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:16:36.621Z", "code_hash": "d2c0d3be5bfa9b4576b0c034766c6a39c19e2680", "approved": true}}, {"pk": 39, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <vector>\r\n#include <cmath>\r\n#include <functional>\r\n\r\nint count_factors(int n) {\r\n  int r = 0;\r\n  //std::cout << n << \": \";\r\n  for (int i = 1; i < std::sqrt(n); i++) {\r\n    if (n % i == 0) {\r\n      //std::cout << i << \" \";\r\n      r+=2;\r\n    }\r\n  }\r\n  //std::cout << std::endl;\r\n  return r;\r\n}\r\n\r\nvoid fn0() {\r\n  int sum = 0;\r\n  for (int i = 1; ; i++) {\r\n    sum += i;\r\n    int s = count_factors(sum);\r\n    //std::cout << sum << \": \" << s << std::endl;\r\n    if (s > 500) {\r\n      std::cout << sum << std::endl;\r\n      return;\r\n    }\r\n  }\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #12 - Highly divisible triangular number", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:17:18.745Z", "code_hash": "693f0da505c4550637a3521840c4cb2990d1eff4", "approved": true}}, {"pk": 40, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <fstream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <functional>\r\n#include \"bigint.h\"\r\n\r\nvoid fn0() {\r\n  bigint sum(\"0\");\r\n  std::fstream in(\"0013.txt\");\r\n  std::string s;\r\n  while (1) {\r\n    in >> s;\r\n    if (in.eof()) break;\r\n    sum = sum + bigint(s);\r\n  }\r\n  sum.print();\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #13 - Large sum", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:18:05.361Z", "code_hash": "55f43a3f3a003eb866f3f6cfd3965a99bcddc140", "approved": true}}, {"pk": 41, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <vector>\r\n#include <functional>\r\n#include <string>\r\n#include \"bigint.h\"\r\n\r\nvoid fn1() {\r\n  bigint f1(\"89\");\r\n  bigint f2(\"144\");\r\n  int term = 12;\r\n  while (f2.to_string().size() < 1000) {\r\n    bigint fx = f1 + f2;\r\n    term++;\r\n    f1 = f2;\r\n    f2 = fx;\r\n    //std::cout << f2.to_string() << std::endl;\r\n  }\r\n  std::cout << term << std::endl;\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #25 - 1000-digit Fibonacci number", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:19:09.042Z", "code_hash": "82c2faf62d806124b599113961e9f1e22f3993b8", "approved": true}}, {"pk": 42, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <vector>\r\n#include <functional>\r\n\r\nvoid fn0() {\r\n  int sum = 1;\r\n  int x = 1;\r\n  for (int w=2; w < 1001; w+=2) {\r\n    for (int i= 0; i < 4; i++) {\r\n      x += w;\r\n      sum += x;\r\n    }\r\n  }\r\n  std::cout << sum << std::endl;\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #28 - Number spiral diagonals", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:19:46.158Z", "code_hash": "7413d3b31f66b6eb8ba04d5384e8e13d2a1eeb3c", "approved": true}}, {"pk": 43, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <vector>\r\n#include <functional>\r\n#include <cmath>\r\n#include <set>\r\n\r\nvoid fn0() {\r\n  std::set<long double> results;\r\n  int max = 101;\r\n  for (int i = 2; i < max; i++) {\r\n    for (int j = 2; j < max; j++) {\r\n      results.insert(std::pow(i, j));\r\n    }\r\n  }\r\n  std::cout << results.size() << std::endl;\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #29 - Distinct powers", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:20:16.501Z", "code_hash": "278978899a65f28c5d4ce9903eb693a9400c770e", "approved": true}}, {"pk": 44, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <vector>\r\n#include <functional>\r\n#include \"pandigital.h\"\r\n\r\nvoid fn0() {\r\n  pandigital x(0, 9);\r\n  long int sum = 0;\r\n  for (; x.join(0,9) != 9876543210 ; ) {\r\n    if (x.join(1,3) % 2 == 0 &&\r\n        x.join(2,4) % 3 == 0 &&\r\n        x.join(3,5) % 5 == 0 &&\r\n        x.join(4,6) % 7 == 0 &&\r\n        x.join(5,7) % 11 == 0 &&\r\n        x.join(6,8) % 13 == 0 &&\r\n        x.join(7,9) % 17 == 0) {\r\n      sum += x.join(0, 9);\r\n    }\r\n    x.increase();\r\n  }\r\n  std::cout << x.join(0, 9) << \": \" << sum << std::endl;\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #43 - Sub-string divisibility", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:20:50.039Z", "code_hash": "8fe868ef424d54538601ce0af6975263c3900f92", "approved": true}}, {"pk": 45, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <vector>\r\n#include <functional>\r\n#include \"primes.h\"\r\n\r\nvoid fn0() {\r\n  auto sieve = prime_sieve<100000>().getsieve();\r\n\r\n  for (int i = 9; ; i+=2) {\r\n    if (!sieve[i]) {\r\n      for (int j = 1; ; j++) {\r\n        int x = 2 * (j * j);\r\n        if (x >= i) {\r\n          std::cout << i << std::endl;\r\n          return;\r\n        }\r\n        if (sieve[i - x]) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #46 - Goldbach's other conjecture", "language": 2, "lame": 0, "submitDate": "2013-03-17T08:21:34.245Z", "code_hash": "4cc7fc1d47cbb62d00e13b611f5e0369120830f9", "approved": true}}, {"pk": 46, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <vector>\r\n#include <functional>\r\n#include \"primes.h\"\r\n\r\nvoid fn0() {\r\n  auto primes = prime_sieve<500000>().getprimes();\r\n\r\n  int cons_count = 0;\r\n  int first = 0;\r\n  for (int i = 2; cons_count < 4 ;i++) {\r\n    int factors = 0;\r\n    std::vector<int> f;\r\n    for (auto x = primes.begin(); *x < i / 2; x++) {\r\n      if (i % *x == 0) {\r\n        factors++;\r\n        f.push_back(*x);\r\n      }\r\n    }\r\n    if (factors == 4) {\r\n      if (cons_count == 0) {\r\n        first = i;\r\n      }\r\n      cons_count++;\r\n    } else {\r\n      cons_count = 0;\r\n    }\r\n  }\r\n  std::cout << first << std::endl;\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #47 - Distinct primes factors", "language": 2, "lame": 0, "submitDate": "2013-03-17T18:12:47.386Z", "code_hash": "bef1792c44560aad9c2e96a40c3d1f4b73a39d5f", "approved": true}}, {"pk": 47, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <iostream>\r\n#include <vector>\r\n#include <functional>\r\n#include <algorithm>\r\n#include \"primes.h\"\r\n\r\nvoid fn1() {\r\n  auto s = prime_sieve<1000001>();\r\n  auto primes = s.getprimes();\r\n  auto sieve = s.getsieve();\r\n\r\n  std::array<int, 78499> sums { 0 };\r\n  int largest = 0;\r\n  int start = 0;\r\n  for (int i = 0; i < primes.size(); i++) {\r\n    for (int j = 0; sums[j] < 1000000 && i+j < primes.size(); j++) {\r\n      //std::cout << i << \", \" << j << std::endl;\r\n      sums[j] += primes[i+j];\r\n      if (sums[j] < 1000000 && sieve[sums[j]]) {\r\n        largest = sums[j];\r\n        start = j;\r\n      }\r\n    }\r\n  }\r\n  std::cout << largest << \" (\" << primes[start] << \")\" << std::endl;\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #50 - Consecutive prime sum", "language": 2, "lame": 0, "submitDate": "2013-03-17T18:12:42.127Z", "code_hash": "10edb9118f8a16fcef88152d22251648791e00b5", "approved": true}}, {"pk": 48, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "double cs_cumsum (csi *p, csi *c, csi n)\r\n{\r\n    csi i, nz = 0 ;\r\n    double nz2 = 0 ;\r\n    if (!p || !c) return (-1) ;     /* check inputs */\r\n    for (i = 0 ; i < n ; i++)\r\n    {\r\n        p [i] = nz ;\r\n        nz += c [i] ;\r\n        nz2 += c [i] ;              /* also in double to avoid csi overflow */\r\n        c [i] = p [i] ;             /* also copy p[0..n-1] back into c[0..n-1]*/\r\n    }\r\n    p [n] = nz ;\r\n    return (nz2) ;                  /* return sum (c [0..n-1]) */\r\n}", "attribution": "https://github.com/areslp/matlab/", "description": "p [0..n] = cumulative sum of c [0..n-1], and then copy p [0..n-1] into c", "language": 2, "lame": 0, "submitDate": "2013-03-18T06:13:07.962Z", "code_hash": "d19a80a705c2f758aaccc57d0ee7455206fa528f", "approved": true}}, {"pk": 49, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "#include <config.h>\r\n#include <stddef.h>\r\n\r\nvoid *memmove (void *dest0, void const *source0, size_t length)\r\n{\r\n  char *dest = dest0;\r\n  char const *source = source0;\r\n  if (source < dest)\r\n    /* Moving from low mem to hi mem; start at end.  */\r\n    for (source += length, dest += length; length; --length)\r\n      *--dest = *--source;\r\n  else if (source != dest)\r\n    {\r\n      /* Moving from hi mem to low mem; start at beginning.  */\r\n      for (; length; --length)\r\n\t*dest++ = *source++;\r\n    }\r\n  return dest0;\r\n}", "attribution": "https://github.com/phed888/sample_app/", "description": "Copy LENGTH bytes from SOURCE to DEST.  Does not null-terminate.", "language": 2, "lame": 0, "submitDate": "2013-03-18T06:14:51.133Z", "code_hash": "683d3d4bfb106da7a759173e0a80a0e7cb9bfd34", "approved": true}}, {"pk": 50, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "static void remove_suffix (char *name, const char *suffix)\r\n{\r\n  char *np;\r\n  const char *sp;\r\n\r\n  np = name + strlen (name);\r\n  sp = suffix + strlen (suffix);\r\n\r\n  while (np > name && sp > suffix)\r\n    if (*--np != *--sp)\r\n      return;\r\n  if (np > name)\r\n    *np = '\\0';\r\n}", "attribution": "http://git.savannah.gnu.org/gitweb/?p=coreutils.git;a=blob;f=src/basename.c;h=074d284d1c83d6331aed29dc0f83f24609351555;hb=HEAD", "description": "Remove SUFFIX from the end of NAME if it is there, unless NAME consists entirely of SUFFIX.", "language": 2, "lame": 0, "submitDate": "2013-03-18T06:15:51.067Z", "code_hash": "c767678e81161332362831a73da0d6492b4cc2b7", "approved": true}}, {"pk": 51, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "static void\r\noutput (const char *start, const char *past_end)\r\n{\r\n  static char buffer[WRITESIZE];\r\n  static size_t bytes_in_buffer = 0;\r\n  size_t bytes_to_add = past_end - start;\r\n  size_t bytes_available = WRITESIZE - bytes_in_buffer;\r\n\r\n  if (start == 0)\r\n    {\r\n      fwrite (buffer, 1, bytes_in_buffer, stdout);\r\n      bytes_in_buffer = 0;\r\n      return;\r\n    }\r\n\r\n  /* Write out as many full buffers as possible. */\r\n  while (bytes_to_add >= bytes_available)\r\n    {\r\n      memcpy (buffer + bytes_in_buffer, start, bytes_available);\r\n      bytes_to_add -= bytes_available;\r\n      start += bytes_available;\r\n      fwrite (buffer, 1, WRITESIZE, stdout);\r\n      bytes_in_buffer = 0;\r\n      bytes_available = WRITESIZE;\r\n    }\r\n\r\n  memcpy (buffer + bytes_in_buffer, start, bytes_to_add);\r\n  bytes_in_buffer += bytes_to_add;\r\n}", "attribution": "http://git.savannah.gnu.org/gitweb/?p=coreutils.git;a=blob;f=src/tac.c;h=5bf40a7e8524bbfcda64ae729580a2e609ad72d9;hb=HEAD", "description": "Print the characters from START to PAST_END - 1.  If START is NULL, just flush the buffer.", "language": 2, "lame": 0, "submitDate": "2013-03-18T06:16:47.245Z", "code_hash": "d513797923743785bc0e10eb8e14d9f2dcdfa4c1", "approved": true}}, {"pk": 52, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "stack<int> add(stack<int> &s1,stack<int> &s2)\r\n  {\r\n    stack<int> s;\r\n    int sum,carry=0,b1,b2;\r\n \r\n    while(!s1.empty()||!s2.empty())\r\n      {\r\n    b1=b2=0;\r\n    if(!s1.empty())\r\n      {\r\n        b1=s1.top();\r\n      s1.pop();\r\n    }\r\n    if(!s2.empty())\r\n      {\r\n        b2=s2.top();\r\n        s2.pop();\r\n         \r\n      }\r\n    sum=(b1+b2+carry)%2;\r\n    carry=(b1+b2+carry)/2;\r\n    s.push(sum);\r\n      }\r\n    if(carry==1)\r\n      s.push(1);\r\n    return s;\r\n  }", "attribution": "", "description": "Adds two stacks of ints", "language": 2, "lame": 0, "submitDate": "2013-03-18T06:17:13.618Z", "code_hash": "474cc3a36b7d013903114cd661737afd1d5a3e5d", "approved": true}}, {"pk": 53, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def fn0():\r\n    return sum(i for i in range(1000) if not i % 5 or not i % 3)", "attribution": "https://github.com/tristan/project-euler-code/", "description": "Project Euler #1 - Multiples of 3 and 5", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:18:49.976Z", "code_hash": "db052b7de1700195134335f8d056ad1cade8432f", "approved": true}}, {"pk": 55, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def fibgen(n):\r\n    n0 = n1 = 1\r\n    while n1 <= n:\r\n        yield n1\r\n        tmp = n1\r\n        n1 = n0 + n1\r\n        n0 = tmp\r\n\r\ndef fn0():\r\n    return sum(i for i in fibgen(4000000) if i % 2 == 0)", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project euler # 2 - Even Fibonacci numbers", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:19:45.565Z", "code_hash": "db82d71a74b0f3dbe35441d727f56324358eb5c0", "approved": true}}, {"pk": 56, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def isprime(n):\r\n    i = 2\r\n    while i < n:\r\n        if n % i == 0:\r\n            return False\r\n        i += 1\r\n    return True\r\n\r\ndef genprimefactors(n):\r\n    i = 2\r\n    while i < n:\r\n        if n % i == 0:\r\n            if isprime(i):\r\n                yield i\r\n        i += 1\r\n\r\ndef fn0():\r\n    number = 600851475143\r\n    divisor = 2;\r\n    while (number > 1):\r\n        if (0 == (number % divisor)):\r\n            number /= divisor\r\n        else:\r\n            divisor += 1\r\n    return divisor", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #3 - Largest prime factor of 600851475143", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:20:38.830Z", "code_hash": "6017a4cccf022ab871a97a52a571bb1ef23d7b9f", "approved": true}}, {"pk": 57, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def ispalindromic(n):\r\n    r = str(n)\r\n    if len(r) % 2:\r\n        return False\r\n    lim = len(r) / 2\r\n    for i in range(lim):\r\n        if r[i] != r[-(i+1)]:\r\n            return False\r\n    return True\r\n\r\ndef fn0():\r\n    largestp = 0\r\n    for i in xrange(100, 1000):\r\n        for j in xrange(100, 1000):\r\n            r = i * j\r\n            if ispalindromic(r) and r > largestp:\r\n                #print r\r\n                largestp = r\r\n    return largestp", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #4 - Largest palindrome product", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:21:02.723Z", "code_hash": "5806a9e6e6f332e8824d72c3f91c716f3bf945d0", "approved": true}}, {"pk": 58, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def gcd(a,b):\r\n    if b == 0:\r\n        return a;\r\n    return gcd(b, a % b)\r\n\r\ndef lcm(a,b):\r\n    return (a * b) / gcd(a,b)\r\n\r\ndef fn0():\r\n    return reduce(lcm, range(1,21))", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #6 - Sum square difference", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:21:31.096Z", "code_hash": "2f32a88be600b73c1d0e9c7af5c9b65ed4801337", "approved": true}}, {"pk": 59, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "import math\r\nimport itertools\r\n\r\ndef primes():\r\n    mem = [2,3,5,7] # memory\r\n    wheel = itertools.cycle([2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10])\r\n    test = 11\r\n    for p in mem:\r\n        yield p\r\n    while True:\r\n        if not any(test % p == 0 for p in \r\n                   itertools.takewhile(lambda x: x * x <= test, mem)):\r\n            yield test\r\n            mem.append(test)\r\n        test += wheel.next()\r\n\r\ndef fn0():\r\n    for i,v in enumerate(primes()):\r\n        if i == 10000:\r\n            return v", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #7 - 10001st prime", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:21:52.849Z", "code_hash": "2da5e953c297dc3c5f69b5e42e12171423b52443", "approved": true}}, {"pk": 60, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def find_greatest_product_of_consecutive_digets_in_string(dstring, digets):\r\n    largest_product = 0\r\n    for i in xrange(len(dstring)-(digets-1)):\r\n        largest_product = max(largest_product, reduce(lambda x, y: x*y, [int(k) for k in dstring[i:i+digets]]))\r\n    return largest_product\r\n\r\ndef fn0():\r\n    dstring = \"\"\"73167176531330624919225119674426574742355349194934\r\n96983520312774506326239578318016984801869478851843\r\n85861560789112949495459501737958331952853208805511\r\n12540698747158523863050715693290963295227443043557\r\n66896648950445244523161731856403098711121722383113\r\n62229893423380308135336276614282806444486645238749\r\n30358907296290491560440772390713810515859307960866\r\n70172427121883998797908792274921901699720888093776\r\n65727333001053367881220235421809751254540594752243\r\n52584907711670556013604839586446706324415722155397\r\n53697817977846174064955149290862569321978468622482\r\n83972241375657056057490261407972968652414535100474\r\n82166370484403199890008895243450658541227588666881\r\n16427171479924442928230863465674813919123162824586\r\n17866458359124566529476545682848912883142607690042\r\n24219022671055626321111109370544217506941658960408\r\n07198403850962455444362981230987879927244284909188\r\n84580156166097919133875499200524063689912560717606\r\n05886116467109405077541002256983155200055935729725\r\n71636269561882670428252483600823257530420752963450\"\"\".replace('\\n', '').replace(' ', '')\r\n    return find_greatest_product_of_consecutive_digets_in_string(dstring, 5)", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #8 - Largest product in a series", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:22:24.985Z", "code_hash": "85332df0addf1597d4f18e07cf567d0eb30e7772", "approved": true}}, {"pk": 61, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "import math\r\n\r\ndef brute_force():\r\n    a = 100\r\n    b = 100\r\n    while True:\r\n        if b > a:\r\n            b = 100\r\n            a += 1\r\n        c = math.sqrt((a ** 2) + (b ** 2))\r\n        if a + b + c == 1000:\r\n            print a, '*', b, '*', c\r\n            return a * b * c\r\n        b += 1\r\n\r\n\r\ndef fn0():\r\n    '''\r\n\r\n    a + b + c = 1000\r\n    a ** 2 + b ** 2 = c ** 2\r\n\r\n\r\n    '''\r\n\r\n    return brute_force()", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #9 - Special Pythagorean triplet", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:22:56.131Z", "code_hash": "a8c8a61062a1bcc3708d3fd0ed429e8cfd46f0b7", "approved": true}}, {"pk": 62, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "memory = {1:1}\r\n\r\ndef get_number_of_sequences(start):\r\n    n = start\r\n    count = 0\r\n    while True:\r\n        if memory.has_key(n):\r\n            return count + memory.get(n)\r\n        if n % 2 == 0:\r\n            n /= 2\r\n        else:\r\n            n = (3 * n) + 1\r\n        count += 1\r\n\r\ndef find_largest_sequence_under(limit):\r\n    n = 1\r\n    while n < limit:\r\n        sequences = get_number_of_sequences(n)\r\n        memory[n] = sequences\r\n        n += 1\r\n    maxval = max(memory.values())\r\n    for i in memory.keys():\r\n        if memory.get(i) == maxval:\r\n            return i\r\n    raise Exception('something went horribly wrong!')\r\n\r\ndef fn0():\r\n    return find_largest_sequence_under(1000000)", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #14 - Longest Collatz sequence", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:23:29.567Z", "code_hash": "7e8d30feda713092dd7281eddf31c4293938f791", "approved": true}}, {"pk": 63, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "class Memoize:\r\n    def __init__(self, f):\r\n        self.f = f\r\n        self.memo = {}\r\n    def __call__(self, *args):\r\n        if not args in self.memo:\r\n            self.memo[args] = self.f(*args)\r\n        return self.memo[args]\r\n\r\ndef _find_all_paths(x, y, max_x, max_y):\r\n    if not (x == max_x or y == max_y):\r\n        return _find_all_paths(x+1, y, max_x, max_y) + _find_all_paths(x, y+1, max_x, max_y)\r\n    else:\r\n        return 1\r\n\r\n_find_all_paths = Memoize(_find_all_paths)\r\n\r\ndef find_all_paths(max_x, max_y):\r\n    return 2 * _find_all_paths(1, 0, max_x, max_y)\r\n\r\ndef fn0():\r\n    for i in range(20):\r\n        find_all_paths(i, i)\r\n    return find_all_paths(20,20)\r\n    \r\n//PE 16\r\ndef fn0():\r\n    return sum(map(int, str(2 ** 1000)))", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #15 - Lattice paths", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:24:03.108Z", "code_hash": "657fbfb1bbf282339bc93f96d9b53eacc36b31f3", "approved": true}}, {"pk": 64, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "temp = \"\"\"75\r\n95 64\r\n17 47 82\r\n18 35 87 10\r\n20 04 82 47 65\r\n19 01 23 75 03 34\r\n88 02 77 73 07 63 67\r\n99 65 04 28 06 16 70 92\r\n41 41 26 56 83 40 80 70 33\r\n41 48 72 33 47 32 37 16 94 29\r\n53 71 44 65 25 43 91 52 97 51 14\r\n70 11 33 28 77 73 17 78 39 68 17 57\r\n91 71 52 38 17 14 91 43 58 50 27 29 48\r\n63 66 04 68 89 53 67 30 73 16 69 87 40 31\r\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\"\"\"\r\n\r\nt = map(lambda x: map(int, x.split()), temp.split('\\n'))\r\n\r\ndef maxsum(sum, line):\r\n    #print 'sum:', sum\r\n    #print 'line:', line\r\n    a = map(lambda x: x[0]+x[1], zip(sum, line))\r\n    #print 'a:', a\r\n    b = map(lambda x: x[0]+x[1], zip(sum[1:], line))\r\n    #print 'b:', b\r\n    return map(max, zip(a, b))\r\n\r\nsolutions = [lambda : reduce(maxsum, t[::-1])[0]]", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project euler #18 - Maximum path sum I", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:24:42.463Z", "code_hash": "a1e22722fa70f1fcdac32cd36c6d6c3762768fd4", "approved": true}}, {"pk": 65, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def factorial(n):\r\n    return reduce(lambda x,y: x*y, range(1, n+1))\r\n    #r = 1\r\n    #for i in range(1, n + 1):\r\n    #    r *= i\r\n    #return r\r\n\r\ndef p24(n, num_digits):\r\n    digits = range(num_digits)\r\n    result = []\r\n    for i in range(num_digits - 1, 0, -1):\r\n        f = factorial(i)\r\n        result.append(digits[n / f])\r\n        del digits[n / f]\r\n        n = n % f\r\n    return result", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #24 - Lexicographic permutations", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:25:17.489Z", "code_hash": "644250db267f8a3ac8b6ec0c52b7624438590238", "approved": true}}, {"pk": 66, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "t = 12\r\nf1 = 89\r\nf2 = 144\r\nwhile len(str(f2)) < 1000:\r\n    fx = f1 + f2\r\n    t += 1\r\n    f1 = f2\r\n    f2 = fx\r\nprint t\r\nprint f2", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #25 - 1000-digit Fibonacci number", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:25:39.560Z", "code_hash": "2807919d4bca3975f0317545a7e88c24f4bbe66b", "approved": true}}, {"pk": 67, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "if __name__ == '__main__':\r\n    r = set()\r\n    for i in range(2, 11):\r\n        for j in range(2, 11):\r\n            r.add(i ** j)\r\n    print len(r)", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #29 - Distinct powers", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:25:59.897Z", "code_hash": "0f7221538548536729026c720c5f3fdb4b04c59f", "approved": true}}, {"pk": 68, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "if __name__ == '__main__':\r\n    i = 2\r\n    s = 0\r\n    while len(str(i)) < 7: # cause 7*9^5 is less than 9999999\r\n        if sum(map(lambda x: x**5, map(int, (str(i))))) == i:\r\n            print i\r\n            s += i\r\n        i += 1\r\n    print \"Sum:\", s\r\n\r\n    print sum(filter(lambda i: sum(map(lambda x: x**5, map(int, (str(i))))) == i, range(2, 1000000)))", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #30 - Digit fifth powers", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:26:33.475Z", "code_hash": "1747afe15e4fee3d8b7041e4288c07afee3e93f8", "approved": true}}, {"pk": 69, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def problem31(m):\r\n    count = 0\r\n    for a in range(m, -1, -200):\r\n        for b in range(a, -1, -100):\r\n            for c in range(b, -1, -50):\r\n                for d in range(c, -1, -20):\r\n                    for e in range(d, -1, -10):\r\n                        for f in range(e, -1, -5):\r\n                            for g in range(f, -1, -2):\r\n                                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    print problem31(1);\r\n    print problem31(2);\r\n    print problem31(5);\r\n    print problem31(10);\r\n    print problem31(20);\r\n    print problem31(50);\r\n    print problem31(100);\r\n    print problem31(200),\r\n    print '=', 73682, '?'", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #31 - Coin sums", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:27:03.991Z", "code_hash": "4aef78e14d317cddb6acacba844df8cb0218b1f9", "approved": true}}, {"pk": 70, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "def iterate_expansion(frac):\r\n    numerator = frac[0]\r\n    denominator = frac[1]\r\n    \r\n    numerator += denominator\r\n    return (denominator + numerator, numerator)\r\n\r\nif __name__ == '__main__':\r\n    frac = (3, 2)\r\n    counter = 0\r\n    for i in xrange(1000):\r\n        if len(str(frac[0])) > len(str(frac[1])):\r\n            counter += 1\r\n        frac = iterate_expansion(frac)\r\n    print 'result:', counter", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #57 - Square root convergents", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:27:34.113Z", "code_hash": "d934d23f07e93aab162024d7f241bab04bc924ca", "approved": true}}, {"pk": 71, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "import primes\r\nimport math\r\n\r\nif __name__ == '__main__':\r\n    limit = 50000000\r\n    sqrtlim = math.sqrt(limit)\r\n    primes = primes.find_all_primes_less_than(sqrtlim)\r\n    results = set()\r\n    for c in primes:\r\n        for b in primes:\r\n            for a in primes:\r\n                if a ** 2 + b ** 3 + c ** 4 < limit:\r\n                    results.add(a ** 2 + b ** 3 + c ** 4)\r\n                else:\r\n                    break\r\n            if c ** 4 + b ** 3 + primes[0] ** 2 >= limit:\r\n                break\r\n        if c ** 4 + primes[0] ** 3 + primes[0] ** 2 >= limit:\r\n            break\r\n    print len(results)", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #87 - Prime power triples", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:28:09.542Z", "code_hash": "72d37fbd737ff64addbb7c86f8d582d105d5d44b", "approved": true}}, {"pk": 72, "model": "lol.snippet", "fields": {"userName": "Deepak", "leet": 0, "code": ">>> solve(\"x - 2*x + 5*x - 46*(235-24) = x + 2\")\r\n3236.0\r\n    \r\ndef solve(eq,var='x'):\r\n    eq1 = eq.replace(\"=\",\"-(\")+\")\"\r\n    c = eval(eq1,{var:1j})\r\n    return -c.real/c.imag", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578481/ (PSF License)", "description": "Just a little bit of hack: a linear equations solver using eval and built-in complex numbers:", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:31:10.739Z", "code_hash": "d7f912e17eced64e0cf3fad534c6bdc786818e61", "approved": true}}, {"pk": 73, "model": "lol.snippet", "fields": {"userName": "James Mills", "leet": 0, "code": "from os import path\r\nfrom crypt import crypt\r\nfrom re import compile as compile_regex\r\n\r\ndef check_auth(user, password):\r\n    \"\"\"Perform authentication against the local systme.\r\n    This function will perform authentication against the local system's\r\n    /etc/shadow or /etc/passwd database for a given user and password.\r\n\r\n    :param user: The username to perform authentication with\r\n    :type user: str\r\n\r\n    :param password: The password (plain text) for the given user\r\n    :type password: str\r\n\r\n    :returns: True if successful, None otherwise.\r\n    :rtype: True or None\r\n    \"\"\"\r\n\r\n    salt_pattern = compile_regex(r\"\\$.*\\$.*\\$\")\r\n    passwd = \"/etc/shadow\" if path.exists(\"/etc/shadow\") else \"/etc/passwd\"\r\n\r\n    with open(passwd, \"r\") as f:\r\n        rows = (line.strip().split(\":\") for line in f)\r\n        records = [row for row in rows if row[0] == user]\r\n\r\n    hash = records and records[0][1]\r\n    salt = salt_pattern.match(hash).group()\r\n\r\n    return crypt(password, salt) == hash", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578489/ (MIT License)", "description": "Sometimes it's useful to perform System Authentication against a Local System using the /etc/shadow or /etc/passwd password databases. This recipe provides a simple function that does exactly that.", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:33:08.633Z", "code_hash": "9785ccbcba4fc7741b3c92cf8a45d0a6ce674e96", "approved": true}}, {"pk": 74, "model": "lol.snippet", "fields": {"userName": "James Mills", "leet": 0, "code": "import string\r\nfrom time import time\r\nfrom itertools import chain\r\nfrom random import seed, choice, sample\r\n\r\ndef mkpasswd(length=8, digits=2, upper=2, lower=2):\r\n    seed(time())\r\n    lowercase = string.lowercase.translate(None, \"o\")\r\n    uppercase = string.uppercase.translate(None, \"O\")\r\n    letters = \"{0:s}{1:s}\".format(lowercase, uppercase)\r\n\r\n    password = list(\r\n        chain(\r\n            (choice(uppercase) for _ in range(upper)),\r\n            (choice(lowercase) for _ in range(lower)),\r\n            (choice(string.digits) for _ in range(digits)),\r\n            (choice(letters) for _ in range((length - digits - upper - lower)))\r\n        )\r\n    )\r\n\r\n    return \"\".join(sample(password, len(password)))", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578468/ (MIT License)", "description": "Create a random password with the specified length and no. of digit, upper and lower case letters.", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:36:25.445Z", "code_hash": "e370e61166893a4b5da6d33a14f0cf43d689161c", "approved": true}}, {"pk": 75, "model": "lol.snippet", "fields": {"userName": "Bjorn Madsen", "leet": 0, "code": "import decimal\r\n\r\ndef ArchPi(precision=99):\r\n    # x: circumference of the circumscribed (outside) regular polygon\r\n    # y: circumference of the inscribed (inside) regular polygon\r\n\r\n    decimal.getcontext().prec = precision+1\r\n    D=decimal.Decimal\r\n    \r\n    # max error allowed\r\n    eps = D(1)/D(10**precision)\r\n    \r\n    # initialize w/ square\r\n    x = D(4)\r\n    y = D(2)*D(2).sqrt()\r\n\r\n    ctr = D(0)\r\n    while x-y > eps:\r\n        xnew = 2*x*y/(x+y)\r\n        y = D(xnew*y).sqrt()\r\n        x = xnew\r\n        ctr += 1\r\n        \r\n\r\n    return str((x+y)/D(2))\r\n\r\nif __name__ == '__main__':\r\n    print(ArchPi(99))", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578478/ (MIT License)", "description": "Archimedes Method for PI (arbitrary precision)", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:38:06.772Z", "code_hash": "876880efebf69c2c3822a752081c7a2a76980af9", "approved": true}}, {"pk": 76, "model": "lol.snippet", "fields": {"userName": "FB36", "leet": 0, "code": "import random\r\nfrom PIL import Image, ImageDraw\r\nimgx = 800; imgy = 600 # image size\r\nimage = Image.new(\"RGB\", (imgx, imgy))\r\ndraw = ImageDraw.Draw(image)\r\npixels = image.load()\r\nn = random.randint(2, 10); m = random.randint(2, 10) # grid size\r\nar = [[random.random() for i in range(n)] for j in range(m)] # random grid\r\nnx = imgx / (n - 1.0)\r\nny = imgy / (m - 1.0)\r\nfor ky in range(imgy):\r\n    for kx in range(imgx):\r\n        i = int(kx / nx); j = int(ky / ny)\r\n        dx0 = kx - i * nx; dx1 = nx - dx0\r\n        dy0 = ky - j * ny; dy1 = ny - dy0\r\n        z = ar[j][i] * dx1 * dy1\r\n        z += ar[j][i + 1] * dx0 * dy1\r\n        z += ar[j + 1][i] * dx1 * dy0\r\n        z += ar[j + 1][i + 1] * dx0 * dy0\r\n        z /= nx * ny            \r\n        c = int(z * 255)\r\n        pixels[kx, ky] = (0, 0, c)\r\n\r\nlabel = \"N = \" + str(n) + \" M = \" + str(m)\r\ndraw.text((0, 0), label, (0, 255, 0)) # write to top-left using green color\r\nimage.save(\"RandomSurface.png\", \"PNG\")", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578469/ (MIT License)", "description": "Bilinear Interpolation - Creates a surface from a grid of random numbers using Bilinear Interpolation.", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:41:34.910Z", "code_hash": "9684efa3a3d6901136ea73ad28acf52949ca6403", "approved": true}}, {"pk": 77, "model": "lol.snippet", "fields": {"userName": "Michael Thamm", "leet": 0, "code": "lengths = map(lambda word: len(word), open(\"foo.txt\",\"r\").readline().split())", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578474/ (MIT License)", "description": "Word count and length with map and lambda", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:42:39.496Z", "code_hash": "aa5055f2d18b8f43ad3c6c454249a114568b7346", "approved": true}}, {"pk": 78, "model": "lol.snippet", "fields": {"userName": "Narayana Chikkam", "leet": 0, "code": "import random\r\nimport unittest\r\n\r\ndef shuffle(cards):\r\n    max = len(cards)-1\r\n    while max != 0:\r\n        r = random.randint(0, max)\r\n        cards[r], cards[max] = cards[max], cards[r]\r\n        max = max - 1\r\n    return cards\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def setUp(self):\r\n        self.actual = range(1, 53)\r\n\r\n    def test_elements(self):\r\n        expected = shuffle(self.actual)\r\n        self.assertEqual(set(self.actual), set(expected))\r\n\r\nif __name__ == \"__main__\":\r\n    unittest.main()", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578466/ (MIT License)", "description": "Python function to shuffle a deck of cards", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:43:46.637Z", "code_hash": "5c3cc59688e0b5f2accaf70397ecf98d0ef85c56", "approved": true}}, {"pk": 79, "model": "lol.snippet", "fields": {"userName": "bartender", "leet": 0, "code": "def pargen(left,right,ans):\r\n    if(left==0 and right==0):\r\n        print ans;\r\n    if(left>0):\r\n        pargen(left-1,right+1,ans+'(');\r\n    if(right>0):\r\n        pargen(left,right-1,ans+')');        \r\npargen(3,0,''); #can pass any starting value as left,initial value of right is always 0.", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578458/ (MIT License)", "description": "Generating Balanced Parenthesis", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:45:33.352Z", "code_hash": "462179a7a91c76cbf9531068c98a23d94130d63f", "approved": true}}, {"pk": 80, "model": "lol.snippet", "fields": {"userName": "alexander baker", "leet": 0, "code": "from scipy import spatial\r\nx, y, z = np.mgrid[0:5, 2:8, 2:3]\r\ndata = zip(x.ravel(), y.ravel(), z.ravel())\r\ntree = spatial.KDTree(data)\r\nprint 'ball', [data[i] for i in tree.query_ball_point(array([1,2,2]), 1)]\r\ndistance, index = tree.query(np.array([[2, 2, 2.2]]))\r\nprint 'query', distance, index, data[index[0]]\r\npts = np.array([[2, 2, 2.2]])\r\n\r\ntree.query(pts)\r\n\r\nimport heapq\r\ndef euclideanDistance(x,y):\r\n    return math.sqrt(sum([(a-b)**2 for (a,b) in zip(x,y)]))\r\nclosestPoints = heapq.nsmallest(1, enumerate(pts), key=lambda y: euclideanDistance(x, y[1]))\r\n\r\nprint closestPoints", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578434/ (MIT License)", "description": "A simple KD Tree example with custom Euclidean distance ball query", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:46:45.974Z", "code_hash": "b9422d70e5daf4b4ee42fc6842c4f702b528762f", "approved": true}}, {"pk": 81, "model": "lol.snippet", "fields": {"userName": "Yong Shin", "leet": 0, "code": "def HammingNeighbors(n, dist, numBits):\r\n    \"\"\"Returns list of numbers that are given hamming distance away from an integer.\r\n    n : an integer\r\n    dist : Hamming distance  \r\n    bits : number of bits of neighbors\r\n    \"\"\"\r\n\r\n    if dist < 0:\r\n        raise Exception, 'Invalid distance'\r\n    onesMask = int('1'*numBits, 2)\r\n\r\n    # Cur array maintains the invariant that for some dist d,  \r\n    # Cur[i] holds all numbers that that are d distance  \r\n    # away from lower i-bits of n\r\n\r\n    # dist == 0                                                                                                                            \r\n    Cur = [[n % (1 <<  _)] for _ in range(numBits+1)]\r\n    # dist > 0\r\n    for d in range(1, dist+1):\r\n        Prev = Cur\r\n        Cur = [[] for _ in range(numBits+1)]\r\n        for i in range(d, numBits+1):\r\n            # n's i-th bit and its inversion                                                                                               \r\n            iBit = n & (1<<i-1)\r\n            iBitInv = iBit ^ (1<<i-1)\r\n            Cur[i] = [iBitInv + x for x in Prev[i-1]] + \\\r\n                     [iBit + x for x in Cur[i-1]]\r\n    return Cur[numBits]", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578423/ (MIT License)", "description": "HammingNeighbors returns all integers that are k number of bits away (i.e. k Hamming distance away) from an integer.", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:50:21.352Z", "code_hash": "3c0cda59b423aa20fff0d4eb912220c30435aebf", "approved": true}}, {"pk": 82, "model": "lol.snippet", "fields": {"userName": "Captain DeadBones", "leet": 0, "code": "import sys\r\n\r\ndef f(x):\r\n\treturn x**3 + x - 1\r\n\t\r\ndef f_prime(x):\r\n\treturn 3*x**2 + 1\r\n\r\ndef newt(x,n):\r\n\tfor i in range(n):\r\n\t\tif f_prime(x) == 0:\r\n\t\t\treturn x\r\n\t\tx = x - f(x)/f_prime(x)\r\n\treturn x\r\n\t\r\ndef main(argv):\r\n\tif (len(sys.argv) != 3):\r\n\t\tsys.exit('Usage: newtons_method.py <x> <n>')\r\n\t\r\n\tprint 'The root is: ',\r\n\tprint newt(float(sys.argv[1]),int(sys.argv[2]))\r\n\r\nif __name__ == \"__main__\":\r\n\tmain(sys.argv[1:])", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578419/ (MIT License)", "description": "Newton's Method to Solve Equations in Python", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:51:36.760Z", "code_hash": "aa45032dc2831efbd20ceebe642536467c323242", "approved": true}}, {"pk": 83, "model": "lol.snippet", "fields": {"userName": "Captain DeadBones", "leet": 0, "code": "def gcd(a,b):\r\n\tt = b\r\n\tb = a % b\r\n\t\r\n\tif b == 0:\r\n\t\treturn t\r\n\telse:\r\n\t\treturn gcd(t,b)\r\n\t\t\r\ndef main(argv):\r\n\tif (len(sys.argv) != 3):\r\n\t\tsys.exit('Usage: gcd.py <a> <b>')\r\n\t\r\n\tprint abs(gcd(int(sys.argv[1]),int(sys.argv[2])))\r\n\r\nif __name__ == \"__main__\":\r\n\tmain(sys.argv[1:])", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578421/ (MIT License)", "description": "Greatest Common Divisor using Recursion in Python", "language": 9, "lame": 0, "submitDate": "2013-03-18T06:52:24.983Z", "code_hash": "daeb6e834dba64b501381e85f66b696627532c8e", "approved": true}}, {"pk": 84, "model": "lol.snippet", "fields": {"userName": "Captain DeadBones", "leet": 0, "code": "import sys\r\nimport math \r\n\r\ndef is_prime(num):\r\n\tfor j in range(2,int(math.sqrt(num)+1)):\r\n\t\tif (num % j) == 0: \r\n\t\t\treturn False\r\n\treturn True\r\n\r\ndef main(argv):\r\n\r\n\tif (len(sys.argv) != 3):\r\n\t\tsys.exit('Usage: prime_numbers3.py <lowest_bound> <upper_bound>')\r\n\r\n\tlow = int(sys.argv[1])\r\n\thigh = int(sys.argv[2])\r\n\t\r\n\tif (low == 2):\r\n\t\tprint 2,\r\n\t\r\n\tif (low % 2 == 0):\r\n\t\tlow += 1\r\n\t\t\r\n\tfor i in range(low,high,2):\r\n\t\tif is_prime(i): \r\n\t\t\tprint i, \r\n\t\t\r\nif __name__ == \"__main__\":\r\n\tmain(sys.argv[1:])", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578402/ (MIT License)", "description": "\"Effcient\" Prime Number Generator in Python", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:03:20.598Z", "code_hash": "fc5cf2ec6a00311b00643fb03a09414c85f3519b", "approved": true}}, {"pk": 85, "model": "lol.snippet", "fields": {"userName": "Captain DeadBones", "leet": 0, "code": "import sys\r\n\r\ndef f(x):\r\n\treturn x**3+x-1\r\n\t\r\ndef secant(x0,x1,n):\r\n\tfor i in range(n):\r\n\t\tif f(x1)-f(x0) == 0:\r\n\t\t\treturn x1\r\n\t\tx_temp = x1 - (f(x1)*(x1-x0)*1.0)/(f(x1)-f(x0))\r\n\t\tx0 = x1\r\n\t\tx1 = x_temp\r\n\treturn x1\r\n\t\r\ndef main(argv):\r\n\tif (len(sys.argv) != 4):\r\n\t\tsys.exit('Usage: secant_method.py <x0> <x1> <n>')\r\n\t\r\n\tprint 'The root is: ',\r\n\tprint secant(float(sys.argv[1]),float(sys.argv[2]),int(sys.argv[3]))\r\n\r\nif __name__ == \"__main__\":\r\n\tmain(sys.argv[1:])", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578420/ (MIT License)", "description": "Secant Method of Solving Equtions in Python", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:04:11.113Z", "code_hash": "d4be7e479e1c4b6d222671314d7d5bab1d42b1f7", "approved": true}}, {"pk": 86, "model": "lol.snippet", "fields": {"userName": "Captain DeadBones", "leet": 0, "code": "CODE = {'A': '.-',     'B': '-...',   'C': '-.-.', \r\n        'D': '-..',    'E': '.',      'F': '..-.',\r\n        'G': '--.',    'H': '....',   'I': '..',\r\n        'J': '.---',   'K': '-.-',    'L': '.-..',\r\n        'M': '--',     'N': '-.',     'O': '---',\r\n        'P': '.--.',   'Q': '--.-',   'R': '.-.',\r\n     \t'S': '...',    'T': '-',      'U': '..-',\r\n        'V': '...-',   'W': '.--',    'X': '-..-',\r\n        'Y': '-.--',   'Z': '--..',\r\n        \r\n        '0': '-----',  '1': '.----',  '2': '..---',\r\n        '3': '...--',  '4': '....-',  '5': '.....',\r\n        '6': '-....',  '7': '--...',  '8': '---..',\r\n        '9': '----.' \r\n        }\r\n\r\n\r\ndef main():\r\n\t\r\n\tmsg = raw_input('MESSAGE: ')\r\n\t\r\n\tfor char in msg:\r\n\t\tif char == ' ':\r\n\t\t\tprint ' '*7\r\n\t\telse:\r\n\t\t\tprint CODE[char.upper()],\r\n\t\t\r\nif __name__ == \"__main__\":\r\n\tmain()", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578408/ (MIT License)", "description": "Morse Code Generator in Python", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:04:58.848Z", "code_hash": "1292ddbebcae7b095796c85cc4f93197763d43d6", "approved": true}}, {"pk": 87, "model": "lol.snippet", "fields": {"userName": "Captain DeadBones", "leet": 0, "code": "import math\r\nimport sys \r\n\r\ndef g(x):\r\n\treturn math.pow(1-x,1/3.0)\r\n\t\r\ndef fpi(x, k):\r\n\tfor i in range(k):\r\n\t\tprint i, x, g(x)\r\n\t\tx = g(x)\r\n\tprint 'The root is: ',\r\n\treturn x\r\n\r\ndef main(argv):\r\n\tif (len(sys.argv) != 3):\r\n\t\tsys.exit('Usage: fixed_point.py <x> <k>')\r\n\t\r\n\tprint 'The root is:',\r\n\tprint fpi(float(sys.argv[1]),int(sys.argv[2]))\r\n\r\nif __name__ == \"__main__\":\r\n\tmain(sys.argv[1:])", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578418/ (MIT License)", "description": "Fixed Point Iteration in Python", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:05:47.548Z", "code_hash": "09be2ef15413aec4b148db0e6b6e360175c51cef", "approved": true}}, {"pk": 88, "model": "lol.snippet", "fields": {"userName": "Captain DeadBones", "leet": 0, "code": "import sys\r\nimport math \r\n\r\ndef is_prime(num):\r\n\tfor j in range(2,int(math.sqrt(num)+1)):\r\n\t\tif (num % j) == 0: \r\n\t\t\treturn False\r\n\treturn True\r\n\r\ndef main(argv):\r\n\r\n\tif (len(sys.argv) != 2):\r\n\t\tsys.exit('Usage: prime_numbers4.py <nth_prime>')\r\n\r\n\ti = 0\r\n\tnum = 2\r\n\tnth = int(sys.argv[1])\r\n\t\t\r\n\twhile i < nth:\r\n\t\tif is_prime(num): \r\n\t\t\ti += 1\r\n\t\t\tif i == nth:\r\n\t\t\t\tprint 'The ' + str(nth) + ' prime number is: ' + str(num)\r\n\t\tnum += 1 \r\n\t\r\nif __name__ == \"__main__\":\r\n\tmain(sys.argv[1:])", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578403/ (MIT License)", "description": "Find the nth prime in python", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:06:28.288Z", "code_hash": "e9bbfdc627a78ca38582249d5e5b18d920f52be0", "approved": true}}, {"pk": 89, "model": "lol.snippet", "fields": {"userName": "Sander Evers", "leet": 0, "code": "import itertools\r\n\r\ndef alldifferent(k,n):\r\n    '''The probability that k random selections from n possibilities\r\n    are all different.'''\r\n    assert(k<=n)\r\n    nums = xrange(n,n-k,-1)\r\n    dens = itertools.repeat(n)\r\n    fracs = itertools.imap(lambda x,y: float(x)/y, nums,dens)\r\n    return reduce(float.__mul__, fracs)\r\n\r\ndef collide(k,n):\r\n    '''The probability that, in k random selections from n possibilities,\r\n    at least two selections collide.'''\r\n    return 1 - alldifferent(k,n)", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578387/ (MIT License)", "description": "Hash collision probability / Birthday problem", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:07:22.084Z", "code_hash": "dd795d7628945c2db9f4b4cb3dd854a1ef2cfb8f", "approved": true}}, {"pk": 90, "model": "lol.snippet", "fields": {"userName": "Stephen Chappell", "leet": 0, "code": "import ast\r\n\r\nwhile True:\r\n    try:\r\n        string = raw_input('What numbers should I average? ')\r\n        words = string.split()\r\n        numbers = [ast.literal_eval(word) for word in words]\r\n        total = sum(numbers)\r\n        count = len(numbers)\r\n        average = 1.0 * total / count\r\n        print 'The average is', average\r\n        raw_input('Press enter to quit.')\r\n        break\r\n    except:\r\n        print 'Please only give me numbers.'", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578365/ (MIT License)", "description": "Averaging Literal Numbers", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:08:06.938Z", "code_hash": "ffd2cf7a2a9f42150426ef36ca0c2e4991d2f5a8", "approved": true}}, {"pk": 91, "model": "lol.snippet", "fields": {"userName": "p@ntut$", "leet": 0, "code": "binary = []\r\ndef strBin(s_str):\r\n\tfor s in s_str:\r\n\t    if s == ' ':\r\n\t        binary.append('00100000')\r\n\t    else:\r\n\t        binary.append(bin(ord(s)))\r\ns_str = input(\"String: \")\r\nstrBin(s_str)\r\n\r\nb_str = '\\n'.join(str(b_str) for b_str in binary) # print as type str\r\n# replace '\\n' to '' to output in one line without spaces, ' ' if with spaces\r\n\r\nprint(b_str.replace('b',''))", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578291/ (GPL3 License)", "description": "String to Binary", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:09:17.448Z", "code_hash": "71fa43cf4fea96b7e1c5f40c29e17559db632998", "approved": true}}, {"pk": 92, "model": "lol.snippet", "fields": {"userName": "Luis Martin Gil", "leet": 0, "code": "from socket import *\r\nimport thread\r\n \r\nBUFF = 1024\r\nHOST = '127.0.0.1'# must be input parameter @TODO\r\nPORT = 9999 # must be input parameter @TODO\r\n\r\ndef gen_response():\r\n    return 'this_is_the_return_from_the_server'\r\n \r\ndef handler(clientsock,addr):\r\n    while 1:\r\n        data = clientsock.recv(BUFF)\r\n        print 'data:' + repr(data)\r\n        if not data: break\r\n        clientsock.send(gen_response())\r\n        print 'sent:' + repr(gen_response())\r\n        clientsock.close()\r\n \r\nif __name__=='__main__':\r\n    ADDR = (HOST, PORT)\r\n    serversock = socket(AF_INET, SOCK_STREAM)\r\n    serversock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\r\n    serversock.bind(ADDR)\r\n    serversock.listen(5)\r\n    while 1:\r\n        print 'waiting for connection...'\r\n        clientsock, addr = serversock.accept()\r\n        print '...connected from:', addr\r\n        thread.start_new_thread(handler, (clientsock, addr))", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578247/ (MIT License)", "description": "Basic threaded Python TCP server", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:10:39.482Z", "code_hash": "6f99b9f001a76851a73c88a580e80d37e370ddfe", "approved": true}}, {"pk": 93, "model": "lol.snippet", "fields": {"userName": "Filippo Squillace", "leet": 0, "code": "import heapq as hq\r\ninf = float('Inf')\r\n\r\ndef dijkstra(G, s):\r\n    n = len(G)\r\n\r\n    Q = [(0, s)]\r\n\r\n    d = [inf for i in range(n)]\r\n    d[s]=0\r\n\r\n\r\n    while len(Q)!=0:\r\n        (cost, u) = hq.heappop(Q)\r\n\r\n        for v in range(n):\r\n            if d[v] > d[u] + G[u][v]:\r\n                d[v] = d[u] + G[u][v]\r\n                hq.heappush(Q, (d[v], v))\r\n\r\n    return d\r\n\r\nG = [\\\r\n        [0.0,  1.0,  3.0,  inf],\\\r\n        [1.0,  0.0,  1.0,  4.0],\\\r\n        [3.0,  1.0,  0.0,  2.0],\\\r\n        [inf,  4.0,  2.0,  0.0]]\r\n\r\nd = dijkstra(G, 0)", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578156/ (MIT License)", "description": "Simple Dijkstra Algorithm", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:11:48.384Z", "code_hash": "b351ed7a16d521170beeb28d595b60699985ef48", "approved": true}}, {"pk": 94, "model": "lol.snippet", "fields": {"userName": "FB36", "leet": 0, "code": "# Apollonian Gasket Fractal using IFS\r\n# FB - 20120114\r\nimport math\r\nimport random\r\nfrom PIL import Image\r\nimgx = 512\r\nimgy = 512\r\nimage = Image.new(\"RGB\", (imgx, imgy))\r\nmaxIt = 100000 # of iterations\r\n\r\ns = math.sqrt(3.0)\r\ndef f(z):\r\n    return 3.0 / (1.0 + s - z) - (1.0 + s) / (2.0 + s)\r\nifs = [\"f(z)\", \"f(z) * complex(-1.0, s) / 2.0\", \"f(z) * complex(-1.0, -s) / 2.0\"]\r\n\r\nxa = -0.6\r\nxb = 0.9\r\nya = -0.75\r\nyb = 0.75\r\n\r\nz = complex(0.0, 0.0)\r\nfor i in range(maxIt):\r\n    z = eval(ifs[random.randint(0, 2)]) \r\n    kx = int((z.real - xa) / (xb - xa) * (imgx - 1))\r\n    ky = int((z.imag - ya) / (yb - ya) * (imgy - 1))\r\n    if kx >=0 and kx < imgx and ky >= 0 and ky < imgy:\r\n        image.putpixel((kx, ky), (255, 255, 255))\r\n\r\nimage.save(\"ApollonianGasket.png\", \"PNG\")", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578016/ (MIT License)", "description": "Apollonian Gasket Fractal using IFS", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:12:34.365Z", "code_hash": "5e6170b9ac0ddd6d73a7265d4ae0aa151c40ae1f", "approved": true}}, {"pk": 95, "model": "lol.snippet", "fields": {"userName": "Assil Ksiksi", "leet": 0, "code": "def primeSieve(x):\r\n    '''\r\n       Generates a list of odd integers from 3 until input, and crosses\r\n       out all multiples of each number in the list.\r\n\r\n       Usage:\r\n\r\n       primeSieve(number) -- Finds all prime numbers up until number.\r\n\r\n       Returns: list of prime integers (obviously).\r\n\r\n       Time: around 1.5 seconds when number = 1000000.\r\n\r\n       '''\r\n    \r\n    numlist = range(3, x+1, 2)\r\n    counter = 0 # Keeps count of index in while loop\r\n    backup = 0 # Used to reset count after each iteration and keep count outside of while loop\r\n    for num in numlist:\r\n        counter = backup\r\n        if num != 0:\r\n            counter += num\r\n            while counter <= len(numlist)-1: # Sifts through multiples of num, setting them all to 0\r\n                    numlist[counter] = 0\r\n                    counter += num\r\n        else: # If number is 0 already, skip\r\n            pass\r\n        backup += 1 # Increment backup to move on to next index\r\n    return [2] + [x for x in numlist if x]", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577965/ (MIT License)", "description": "Sieve of Eratosthenes (Prime Generator)", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:13:28.681Z", "code_hash": "9045f64abcfa083fdfcc676bc94f71e6512aeb38", "approved": true}}, {"pk": 96, "model": "lol.snippet", "fields": {"userName": "FB36", "leet": 0, "code": "# Tetration Fractal\r\n# http://en.wikipedia.org/wiki/Tetration\r\n# FB - 201110237\r\nimport math\r\nfrom PIL import Image\r\nimgx = 512\r\nimgy = 512\r\nimage = Image.new(\"RGB\", (imgx, imgy))\r\n# drawing area (xa < xb & ya < yb)\r\nxa = -1.5\r\nxb = -0.75\r\nya = 0.0\r\nyb = 0.75\r\nmaxIt = 256 # max number of iterations allowed\r\nfor ky in range(imgy):\r\n    for kx in range(imgx):\r\n        x = xa + (xb - xa) * kx / (imgx - 1)\r\n        y = ya + (yb - ya) * ky / (imgy - 1)\r\n        for i in range(maxIt):\r\n            try:\r\n                e = math.exp(-0.5 * math.pi * y)\r\n                p = math.pi * x / 2\r\n                x = e * math.cos(p)\r\n                y = e * math.sin(p)\r\n            except:\r\n                break\r\n            if math.hypot(x, y) > 1000000:\r\n                break\r\n        image.putpixel((kx, ky), (i % 4 * 64, i % 8 * 32, i % 16 * 16))\r\nimage.save(\"TetrationFractal.png\", \"PNG\")", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577917/ (MIT License)", "description": "Tetration Fractal", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:14:10.860Z", "code_hash": "4f3c3338e4946ed20fe5dcd6bd7dd62fce263e61", "approved": true}}, {"pk": 97, "model": "lol.snippet", "fields": {"userName": "Yang", "leet": 0, "code": "def allperm(inputstr):\r\n    for i in range(len(inputstr)):\r\n        yield(inputstr[i])        \r\n        for s in allperm(inputstr[:i] + inputstr[i+1:]):\r\n            yield(inputstr[i] + s)", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577842/ (MIT License)", "description": "get all possible combinations of characters given a string", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:14:47.691Z", "code_hash": "4d617ec7a4350353ebdafc019ee00c86e52e5344", "approved": true}}, {"pk": 98, "model": "lol.snippet", "fields": {"userName": "Stijn de Graaf", "leet": 0, "code": "def frequency_analysis(text):\r\n    '''Counts the frequency of characters within a text\r\n\r\n    text -- the text to be analysed\r\n\r\n    '''\r\n    import re\r\n    alphabet = {}\r\n    for i in range(26):\r\n        alphabet[chr(65+i)] = 0\r\n    for char in text.upper():\r\n        for i in range(94):\r\n            if chr(33 + i) == char:\r\n                try:\r\n                    alphabet[char] += 1\r\n                except KeyError:\r\n                    alphabet[char] = 1\r\n                break\r\n    re.sub(r'\\s', '', text)\r\n    count = len(text)\r\n    for i in range(94):\r\n        char = chr(33+i)\r\n        try:\r\n            print(\"{} = {}%\".format(char, round(alphabet[char] * 100/count, 1)))\r\n        except KeyError:\r\n            pass", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577837/ (MIT License)", "description": "Frequency Analyser", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:15:31.613Z", "code_hash": "482478689f5b203abdaf81a95918418b853c3fef", "approved": true}}, {"pk": 99, "model": "lol.snippet", "fields": {"userName": "FB36", "leet": 0, "code": "# Random fractal curve\r\n# FB - 201107096\r\nimport math\r\nimport random\r\nfrom PIL import Image\r\nimgx = 300\r\nimgy = 600\r\nimage = Image.new(\"RGB\", (imgx, imgy))\r\nc = random.random()\r\n\r\ndef frCurve(xa, ya, xb, yb):\r\n    dx = xb - xa\r\n    dy = yb - ya\r\n    d = math.hypot(dx, dy)\r\n    if d <= 1:\r\n        if xa >= 0 and xa < imgx and ya >=0 and ya < imgy:\r\n            image.putpixel((xa, ya), (0, 255, 0))\r\n        if xb >= 0 and xb < imgx and yb >=0 and yb < imgy:\r\n            image.putpixel((xb, yb), (0, 255, 0))\r\n        return\r\n    xm = xa + dx * c\r\n    ym = ya + dy * c + math.copysign(dx * c, random.random() - 0.5)\r\n    frCurve(xa, ya, xm, ym)\r\n    frCurve(xm, ym, xb, yb)\r\n\r\n# main\r\nfrCurve(0, (imgy - 1) / 2, imgx - 1, (imgy - 1) / 2)\r\nimage.save(\"Random_Fractal_Curve.png\", \"PNG\")", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577783/ (MIT License)", "description": "Random fractal curve", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:16:10.768Z", "code_hash": "55b51c40276b7ace4fc43998987d2e9ca7c8f43a", "approved": true}}, {"pk": 100, "model": "lol.snippet", "fields": {"userName": "wong2", "leet": 0, "code": "#-*-coding:utf-8-*-\r\n\r\nfrom bitarray import bitarray\r\n\r\ndef bitsort(list_to_sort):\r\n    a = bitarray(max(list_to_sort)+1)\r\n    a.setall(False)\r\n    for n in list_to_sort:\r\n        a[n] = True\r\n    return [i for i,val in enumerate(a) if val]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print bitsort([17, 8, 27, 16, 26, 1, 5, 0, 24])", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577763/ (MIT License)", "description": "BitSort", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:16:49.653Z", "code_hash": "5689113e4c07aa5e2cb2452ae98223d8322a5978", "approved": true}}, {"pk": 101, "model": "lol.snippet", "fields": {"userName": "FB36", "leet": 0, "code": "# http://en.wikipedia.org/wiki/Lambert_W_function\r\n# FB - 201105297\r\nimport math\r\neps = 0.00000001 # max error allowed\r\ndef w0(x): # Lambert W function using Newton's method\r\n    w = x\r\n    while True:\r\n        ew = math.exp(w)\r\n        wNew = w - (w * ew - x) / (w * ew + ew)\r\n        if abs(w - wNew) <= eps: break\r\n        w = wNew\r\n    return w\r\n\r\n# usage example: solution of x**x = a\r\na = float(raw_input(\"Enter a positive number: \"))\r\nx = math.log(a) / w0(math.log(a)) # solution 1\r\nprint x\r\nx = math.exp(w0(math.log(a))) # solution 2\r\nprint x", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577729/ (MIT License)", "description": "Lambert W Function", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:17:27.054Z", "code_hash": "d0fa85b9d72ac7a1a0e9468a38cdd31ff0b3f220", "approved": true}}, {"pk": 102, "model": "lol.snippet", "fields": {"userName": "Michael Puckett", "leet": 0, "code": "def pascals_triangle(n):\r\n    '''\r\n    Pascal's triangle:\r\n\r\n    for x in pascals_triangle(5):\r\n        print('{0:^16}'.format(x))\r\n\r\n          [1]       \r\n         [1, 1]     \r\n       [1, 2, 1]    \r\n      [1, 3, 3, 1]  \r\n    [1, 4, 6, 4, 1]\r\n    '''\r\n    x=[[1]]\r\n    for i in range(n-1):\r\n        x.append([sum(i) for i in zip([0]+x[-1],x[-1]+[0])])\r\n    return x", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577542/ (MIT License)", "description": "Pascal's triangle", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:18:14.710Z", "code_hash": "6c59b350ffe426474b438212b0758bf406bd2ef7", "approved": true}}, {"pk": 103, "model": "lol.snippet", "fields": {"userName": "FB36", "leet": 0, "code": "# Halley's method for solving f(x)=0\r\n# http://en.wikipedia.org/wiki/Halley%27s_method\r\n# FB - 201011265\r\nglobal h\r\nh = 0.00000001\r\neps = 0.000001\r\n\r\n# f(x) to solve\r\ndef f(x):\r\n    return x * x - 2.0\r\n\r\ndef fp(x):\r\n    global h\r\n    return (f(x + h) - f(x)) / h\r\n\r\ndef fpp(x):\r\n    global h\r\n    return (fp(x + h) - fp(x)) / h\r\n\r\n# main\r\nx = 2.0 # initial value\r\n\r\nwhile True:\r\n    fx = f(x)\r\n    fpx = fp(x)\r\n    xnew = x - (2.0 * fx * fpx) / (2.0 * fpx * fpx - fx * fpp(x))\r\n    print xnew\r\n    if abs(xnew - x) <= eps: break\r\n    x = xnew", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577472/ (MIT License)", "description": "Halley's Method for Solving Equations", "language": 9, "lame": 0, "submitDate": "2013-03-19T06:18:57.182Z", "code_hash": "6e992fd38611a99d373d4f176a83f9c8f41431b4", "approved": true}}, {"pk": 104, "model": "lol.snippet", "fields": {"userName": "Jayesh Sheth", "leet": 0, "code": "<?php\r\n/**\r\n * This function generates an alpha-numeric password salt (with a default of 32 characters)\r\n * @param $max integer The number of characters in the string\r\n * @author Jayesh Sheth <js_scripts@fastmail.fm>\r\n * Inspired by: http://code.activestate.com/recipes/576894-generate-a-salt/?in=lang-php\r\n */\r\nfunction generateSalt($max = 32) {\r\n\t$baseStr = time() . rand(0, 1000000) . rand(0, 1000000);\r\n\t$md5Hash = md5($baseStr);\r\n\tif($max < 32){\r\n\t\t$md5Hash = substr($md5Hash, 0, $max);\r\n\t}\r\n\treturn $md5Hash;\r\n}\r\n\r\n//Usage:\r\n/*\r\necho \"Salt with 32 characters:\\n\";\r\necho generateSalt() . \"\\n\";\r\necho \"Salt with 5 characters:\\n\";\r\necho generateSalt(5) . \"\\n\";\r\n*/\r\n?>", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577071/ (MIT License)", "description": "Generate an alpha-numeric password salt", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:19:49.864Z", "code_hash": "e259c040bd7970b2cacfb4bf492ef20bbea3a0d9", "approved": true}}, {"pk": 105, "model": "lol.snippet", "fields": {"userName": "Xavier L.", "leet": 0, "code": "<?php\r\n\r\n/**\r\n * This function generates a password salt as a string of x (default = 15) characters\r\n * in the a-zA-Z0-9!@#$%&*? range.\r\n * @param $max integer The number of characters in the string\r\n * @return string\r\n * @author AfroSoft <info@afrosoft.tk>\r\n */\r\nfunction generateSalt($max = 15) {\r\n        $characterList = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*?\";\r\n        $i = 0;\r\n        $salt = \"\";\r\n        while ($i < $max) {\r\n            $salt .= $characterList{mt_rand(0, (strlen($characterList) - 1))};\r\n            $i++;\r\n        }\r\n        return $salt;\r\n}\r\n\r\n?>", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/576894/ (MIT License)", "description": "Generate a salt", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:20:30.130Z", "code_hash": "592874dc7e172747ddf5b5beae4826f743d217ee", "approved": true}}, {"pk": 106, "model": "lol.snippet", "fields": {"userName": "Noah Spurrier", "leet": 0, "code": "function js_array_to_php_array (a)\r\n// This converts a javascript array to a string in PHP serialized format.\r\n// This is useful for passing arrays to PHP. On the PHP side you can \r\n// unserialize this string from a cookie or request variable. For example,\r\n// assuming you used javascript to set a cookie called \"php_array\"\r\n// to the value of a javascript array then you can restore the cookie \r\n// from PHP like this:\r\n//    <?php\r\n//    session_start();\r\n//    $my_array = unserialize(urldecode(stripslashes($_COOKIE['php_array'])));\r\n//    print_r ($my_array);\r\n//    ?>\r\n// This automatically converts both keys and values to strings.\r\n// The return string is not URL escaped, so you must call the\r\n// Javascript \"escape()\" function before you pass this string to PHP.\r\n{\r\n    var a_php = \"\";\r\n    var total = 0;\r\n    for (var key in a)\r\n    {\r\n        ++ total;\r\n        a_php = a_php + \"s:\" +\r\n                String(key).length + \":\\\"\" + String(key) + \"\\\";s:\" +\r\n                String(a[key]).length + \":\\\"\" + String(a[key]) + \"\\\";\";\r\n    }\r\n    a_php = \"a:\" + total + \":{\" + a_php + \"}\";\r\n    return a_php;\r\n}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/414334/ (MIT License)", "description": "Pass Javascript arrays to PHP", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:21:30.139Z", "code_hash": "68be01af39611248dd909278bd5487b0de568c1c", "approved": true}}, {"pk": 107, "model": "lol.snippet", "fields": {"userName": "imam ferianto", "leet": 0, "code": "function sayhello(){\r\n $hours=date(\"G\")+0;\r\n ### you can set own criteria in your country\r\n ### whats time we must say good morning and etc\r\n if( $hours>=0 &&  $hours<=14) $hellowords=\"Good Morning\";\r\n elseif( $hours<=18) $hellowords=\"Good Afternoon\";\r\n else $hellowords=\"Good Night\";\r\n return $hellowords;\r\n}\r\n\r\n\r\n### calling in your script with\r\n### echo \"Hello user, \".sayhello();", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/208103/ (MIT License)", "description": "Making Interactive Welcome Text", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:22:09.883Z", "code_hash": "ecd16bcf9a3b1af95a0abc2abb8e6391345f7af9", "approved": true}}, {"pk": 108, "model": "lol.snippet", "fields": {"userName": "imam ferianto", "leet": 0, "code": "<?\r\n### filename: connect-module.php\r\n### this file cannot execute if we are not calling by include function\r\n### by pass section, must be place berfore do anything (on top line)\r\nif(eregi(\"connect-module.php\",$PHP_SELF)) exit(); \r\n\r\n\r\n### your code begin below\r\n###............\r\n\r\n?>", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/207176/ (MIT License)", "description": "Protect PHP File that must be included", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:22:47.479Z", "code_hash": "875039f569173e52b20c41302c3c156507e0a881", "approved": true}}, {"pk": 109, "model": "lol.snippet", "fields": {"userName": "Alvin Estevez", "leet": 0, "code": "<?php\r\n\r\n## Passing values to the commify() function\r\n$number  = 100000;\r\n$display_number = commify ($number);\r\n\r\n## Display output\r\nprint \"Input: $number\" . \"<br>\"; \r\nprint \"Output: $display_number\" . \"<br>\"; \r\n\r\n## The Commify Function\r\nfunction commify ($str) { \r\n        $n = strlen($str); \r\n        if ($n <= 3) { \r\n                $return=$str;\r\n        } \r\n        else { \r\n                $pre=substr($str,0,$n-3); \r\n                $post=substr($str,$n-3,3); \r\n                $pre=commify($pre); \r\n                $return=\"$pre,$post\"; \r\n        }\r\n        return($return); \r\n}\r\n\r\n?>", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/202051/ (MIT License)", "description": "PHP Commify Function", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:23:22.787Z", "code_hash": "f937e35409447119dcddd7b5a78f71df7fed9152", "approved": true}}, {"pk": 110, "model": "lol.snippet", "fields": {"userName": "Fritz Cizmarov", "leet": 0, "code": "<?\r\n    header (\"Content-type: image/jpeg\"); # We will create an *.jpg\r\n    $pic = @imagecreatefromjpeg($url) or die (\"Image not found!\");\r\n    if ($pic) {\r\n        $width = imagesx($pic);\r\n        $height = imagesy($pic);\r\n        $twidth = 160; # width of the thumb 160 pixel\r\n        $theight = $twidth * $height / $width; # calculate height\r\n        $thumb = @imagecreatetruecolor ($twidth, $theight) or\r\n\t    die (\"Can't create Image!\");\r\n\timagecopyresized($thumb, $pic, 0, 0, 0, 0,\r\n\t    $twidth, $theight, $width, $height); # resize image into thumb\r\n\tImageJPEG($thumb,\"\",75); # Thumbnail as JPEG\r\n    }\r\n?>", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/188440/ (MIT License)", "description": "thumb.php", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:24:00.554Z", "code_hash": "6dd268dc694f6c2fcaefaa56b8c6e740c58213f3", "approved": true}}, {"pk": 111, "model": "lol.snippet", "fields": {"userName": "Steve Belanger", "leet": 0, "code": "function CheckEmail($Email = \"\") {\r\n  if (ereg(\"[[:alnum:]]+@[[:alnum:]]+\\.[[:alnum:]]+\", $Email)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/121796/ (MIT License)", "description": "Check email format", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:24:34.069Z", "code_hash": "28ea0264a84e79cd6a5c6f2f1e9bef754ac50a81", "approved": true}}, {"pk": 112, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php \r\n\r\nfunction convert ($iBase, $iNumber)\r\n{\r\n    $aHexValues = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\r\n    $sReturn = '';\r\n    \r\n    $iIndex = 0;\r\n    while ($iNumber >= $iBase)\r\n    {\r\n        $iIndex = $iNumber % $iBase;\r\n        $iNumber = floor($iNumber / $iBase);\r\n        $sReturn = $aHexValues[$iIndex] . $sReturn;\r\n    }\r\n    $sReturn = $aHexValues[$iNumber] . $sReturn;\r\n    return $sReturn;\r\n}\r\n\r\n?>", "attribution": "", "description": "Convert base 10 int to any other base up to 16.", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:25:07.257Z", "code_hash": "3e4fd5ac870424d536a759bce15011a0e35c06fa", "approved": true}}, {"pk": 113, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<? \r\n#   A recursive function to traverse a multi-dimensional array \r\n#   where the dimensions are not known \r\n# \r\n\r\nfunction get_array_elems($arrResult, $where=\"array\"){ \r\n           while(list($key,$value)=each($arrResult)){ \r\n                 if (is_array($value)){ \r\n                    get_array_elems($value, $where.\"[$key]\"); \r\n                 } \r\n                 else { \r\n                       for ($i=0; $i<count($value);$i++){ \r\n                             echo $where.\"[$key]=\".$value.\"<BR>\\n\"; \r\n                       } \r\n                 } \r\n           } \r\n  } \r\n\r\n  get_array_elems($arrResult); \r\n\r\n?>", "attribution": "", "description": "A recursive function to traverse a multi-dimensional array where the dimensions are not known", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:25:35.112Z", "code_hash": "a7a5fb0cdfbe18071c9b02392ee0e010e25beca9", "approved": true}}, {"pk": 114, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<? \r\nfunction bin2text($bin_str) \r\n{ \r\n    $text_str = ''; \r\n    $chars = explode(\"\\n\", chunk_split(str_replace(\"\\n\", '', $bin_str), 8)); \r\n    $_I = count($chars); \r\n    for($i = 0; $i < $_I; $text_str .= chr(bindec($chars[$i])), $i  ); \r\n    return $text_str; \r\n} \r\n\r\nfunction text2bin($txt_str) \r\n{ \r\n    $len = strlen($txt_str); \r\n    $bin = ''; \r\n    for($i = 0; $i < $len; $i  ) \r\n    { \r\n        $bin .= strlen(decbin(ord($txt_str[$i]))) < 8 ? str_pad(decbin(ord($txt_str[$i])), 8, 0, STR_PAD_LEFT) : decbin(ord($txt_str[$i])); \r\n    } \r\n    return $bin; \r\n} \r\nprint text2bin('How are you gentlements?'); \r\n?>", "attribution": "", "description": "Binary to Text", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:25:52.263Z", "code_hash": "5f451f3c64fc40b9567c128e60a94220c53da1f1", "approved": true}}, {"pk": 115, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php \r\nfunction  titleCase($string)  { \r\n        $len=strlen($string); \r\n        $i=0; \r\n        $last= \"\"; \r\n        $new= \"\"; \r\n        $string=strtoupper($string); \r\n        while  ($i<$len): \r\n                $char=substr($string,$i,1); \r\n                if  (ereg( \"[A-Z]\",$last)): \r\n                        $new.=strtolower($char); \r\n                else: \r\n                        $new.=strtoupper($char); \r\n                endif; \r\n                $last=$char; \r\n                $i++; \r\n        endwhile; \r\n        return($new); \r\n}; \r\n?>", "attribution": "", "description": "Converts a string to Title Case", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:26:10.057Z", "code_hash": "cae303fc6dcd1529d2f7bf5490be546317eddfa6", "approved": true}}, {"pk": 116, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php \r\nfunction  randomdigit($digits)  {   \r\n      static  $startseed  =  0;   \r\n      if  (!$startseed)  { \r\n            $startseed  =  (double)microtime()*getrandmax();   \r\n            srand($startseed); \r\n      } \r\n      $range  =  8; \r\n      $start  =  1; \r\n      $i  =  1; \r\n      while  ($i<$digits)  { \r\n            $range  =  $range  .  9; \r\n            $start  =  $start  .  0; \r\n            $i++; \r\n      } \r\n      return  (rand()%$range+$start);   \r\n} \r\n?>", "attribution": "", "description": "Random digit", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:26:24.999Z", "code_hash": "a103c7b02895bdb13fdae036ada96b223dd87944", "approved": true}}, {"pk": 117, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php \r\nfunction ResizeImage($image ,$width ,$height) \r\n{ \r\n//image resizer by myscripting \r\n//get the size of the original \r\n$size = GetImageSize($image); \r\n//divide the width / height percentage by 100 \r\n$new_width = 100 / $width; \r\n$new_height = 100 / $height; \r\n//store the resized dimensions in a variable \r\n$sizeh = $size[1]/ $new_height; \r\n$sizew= $size[0]/ $new_width; \r\n//display the new resized image \r\n$new_image = \"<img src = \\\"$image\\\" height=\\\"$sizeh\\\" width =\\\"$sizew\\\">\"; \r\necho $new_image; \r\n} \r\n?>", "attribution": "", "description": "Image Resizer", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:26:49.003Z", "code_hash": "5b6e1f6f3b6a3e1caad5ed8c1c969705ee5febb4", "approved": true}}, {"pk": 118, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?\r\nphpfunction makeClickableLinks($text) \r\n{  $text = eregi_replace('(((f|ht){1}tp://)[-a-zA-Z0-9@:%_\\+.~#?&//=]+)',\r\n    '<a href=\"\\\\1\">\\\\1</a>', $text);  \r\n$text = eregi_replace('([[:space:]()[{}])\r\n(www.[-a-zA-Z0-9@:%_\\+.~#?&//=]+)',\r\n    '\\\\1<a href=\"http://\\\\2\">\\\\2</a>', $text);  \r\n$text = eregi_replace('([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,3})',    \r\n'<a href=\"mailto:\\\\1\">\\\\1</a>', $text);  return $text;}\r\n// Usage// Email address example$text = \"you@example.com\";echo makeClickableLinks($text);echo \"<br /><br />\";\r\n// URL example$text = \"http://www.example.com\";echo makeClickableLinks($text);\r\necho \"<br /><br />\";// FTP URL example$text = \"ftp://ftp.example.com\";echo makeClickableLinks($text);\r\n?>", "attribution": "", "description": "Convert links into clickable hyperlinks", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:27:09.797Z", "code_hash": "8f903d3c1dc5269c8e5893f15dfc7f617d0d08b4", "approved": true}}, {"pk": 119, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php \r\n$strText = \"This is a test\"; \r\n$wordcount = count(explode(\" \",$strText)); \r\necho \"There are $wordcount words in $strText\"; \r\n?>", "attribution": "", "description": "Count words in a sentence", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:27:27.892Z", "code_hash": "3ccd2fc2573defdb8c5fe741b5439527c6b2f0b5", "approved": true}}, {"pk": 120, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php\r\n/** * The letter l (lowercase L) and the number 1 \r\n* have been removed, as they can be mistaken \r\n* for each other. */\r\nfunction createRandomPassword() \r\n{    \r\n    $chars = \"abcdefghijkmnopqrstuvwxyz023456789\";\r\n    srand((double)microtime() *1000000);    \r\n    $i = 0;    $pass = '' ;    \r\n    while ($i <= 7) {       \r\n        $num = rand() % 33;        \r\n        $tmp = substr($chars, $num, 1);        \r\n        $pass = $pass . $tmp;        \r\n        $i++;    \r\n    }    \r\n    return $pass;\r\n}\r\n// Usage: \r\n// $password = createRandomPassword();\r\n// echo \"Your random password is: $password\";\r\n?>", "attribution": "", "description": "Create a random password", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:29:09.771Z", "code_hash": "6ab434af0b50f8e9ea5dc7b899b6f67308ac18cc", "approved": true}}, {"pk": 121, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?\r\nfunction lottery($maxn = \"49\",$maxb=\"6\") { \r\nsrand((double) microtime() * 1000000); \r\n\r\nwhile (1>0) { \r\n    $lottery[] = rand(1,$maxn); \r\n    $lottery = array_unique($lottery); \r\n    if (sizeof($lottery) == $maxb) break; \r\n} \r\nsort($lottery); \r\nreturn implode(\", \",$lottery); \r\n} \r\n$lotterynums = lottery(); \r\n?> \r\n<html> \r\n<head> \r\n<title>Lottery Numbers</title> \r\n</head> \r\n<body> \r\n<h1>And your lottery numbers for this week are...</h1><br> \r\n<h3><?=$lotterynums?></h3><br> \r\n</body> \r\n</html>", "attribution": "", "description": "Lottery number generator", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:29:53.915Z", "code_hash": "94fc4df9c96d805cdab6ab06d8e5e3a46802db0c", "approved": true}}, {"pk": 122, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<? \r\n$visitor_ip = $HTTP_COOKIE_VARS[\"user_ip\"]; \r\n$counter = \"counter.txt\"; \r\n$counter_file_line = file($counter); \r\n\r\nif(!$vistor_ip) \r\n{ \r\n  setcookie(\"user_ip\", $REMOTE_ADDR, time()+360000); \r\n  $counter_file_line[0]++; \r\n  $cf = fopen($counter, \"w+\"); \r\n  fputs($cf, \"$counter_file_line[0]\"); \r\n  fclose($cf); \r\n} \r\nelseif($vistor_ip != $REMOTE_ADDR) \r\n{ \r\n  $counter_file_line[0]++; \r\n  $cf = fopen($counter, \"w+\"); \r\n  fputs($cf, \"$counter_file_line[0]\"); \r\n  fclose($cf); \r\n} \r\n?>", "attribution": "", "description": "A flat file counter", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:30:29.925Z", "code_hash": "a7ef8765e5013b3434a6e798f2dc9cc0137bc7f6", "approved": true}}, {"pk": 123, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "function JSSetCookie($CName,$CValue,$CExpr=FALSE){ \r\n// $CName is the name of the cookie \r\n// $CValue is the value to be stored in the cookie \r\n// $CXpr is in years \r\n// This function will allow cookies to be set even after \r\n// HTML has been printed on the page.  It is a supplement to the \r\n// SetCookie function when you have to output text before a cookie is set. \r\n\r\nif($CExpr!=FALSE){ \r\n$CookieString=\"astr= '$CName' + '=' + '$CValue' + ';expires=' + expr + ';path=/';\"; \r\n$Cookie.=\"\\n<script language=\\\"javascript\\\">\\n\"; \r\n$Cookie.='function makeYearExpDate(yr){ \r\nvar expire = new Date(); \r\nexpire.setTime(expire.getTime() + ((yr *365) *24 * 60 * 60 * 1000)); \r\nexpire = expire.toGMTString() \r\nreturn expire \r\n} \r\nexpr =makeYearExpDate('.$CExpr.');'; \r\n$Cookie.=\"\\n\".$CookieString.\"\\n\"; \r\n$Cookie.=\"document.cookie=astr;\\n</script>\\n\"; \r\n}else{ \r\n$Cookie.=\"\\n<script language=\\\"javascript\\\">\\n\"; \r\n$Cookie.=\"document.cookie='$CName=$CValue;path=/';\"; \r\n$Cookie.=\"\\n</script>\\n\"; \r\n} \r\necho $Cookie; \r\n}", "attribution": "", "description": "Function that allows a Javascript cookie to be set after HTML has been outputted to the page.", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:31:08.361Z", "code_hash": "79e7b420236ead46399e733ad3ac90ee1245b17f", "approved": true}}, {"pk": 124, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php\r\n\r\n// File and new size\r\n//$imgfile = 'smp.jpg';\r\n//$percent = 0.2;\r\nheader('Content-type: image/jpeg');\r\n\r\nlist($width, $height) = getimagesize($imgfile);\r\n$newwidth = $width * $percent;\r\n$newheight = $height * $percent;\r\n\r\n$thumb = ImageCreateTrueColor($newwidth,$newheight);\r\n$source = imagecreatefromjpeg($imgfile);\r\n\r\nimagecopyresized($thumb, $source, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);\r\n\r\nimagejpeg($thumb);\r\n?>", "attribution": "", "description": "Image Resizer", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:31:27.202Z", "code_hash": "be60e1723298c9927416bded4b504fa7a4b2edf5", "approved": true}}, {"pk": 125, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?\r\n  \r\n  $width=200;\r\n  $height=200;\r\n\r\n  Header(\"Content-type: image/gif\");\r\n  $im = imagecreate($width,$height);\r\n  $white=ImageColorAllocate($im,255,255,255);\r\n  $blue=ImageColorAllocate($im,1,18,250);\r\n  $red=ImageColorAllocate($im,125,12,89);\r\n  $centerx=100;\r\n  $centery=100;\r\n\r\n  for ($x=-100;$x<=100;$x++)\r\n   {\r\n    for ($sub=500;$sub<=10000;$sub+=500)\r\n       {\r\n       $new=($x*$x*$x)/$sub;\r\n       imagesetpixel ($im, ($centerx+$x), ($centery-$new), $blue);\r\n       imagesetpixel ($im, ($centery-$new),($centerx+$x) , $red);\r\n       imagesetpixel ($im, ($centerx-$x), ($centery-$new), $red);\r\n       imagesetpixel ($im, ($centery+$new),($centerx+$x) , $blue);\r\n       }\r\n   }\r\n  imagePng($im);\r\n  ImageDestroy($im);\r\n?>", "attribution": "", "description": "MATH ART", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:31:47.062Z", "code_hash": "705a91220a19f281b33cf05a944f7fae0ead6df3", "approved": true}}, {"pk": 126, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?\r\n\r\n  $width=410; \r\n  $height=410; \r\n\r\n  Header(\"Content-type: image/gif\"); \r\n  $im = imagecreate($width,$height); \r\n  $gray=ImageColorAllocate($im,225,225,225); \r\n\r\n  $black=ImageColorAllocate($im,0,0,0); \r\n\r\n   for ($i=0;$i<=200;$i+=10) \r\n       { \r\n         imageline($im,210-$i,200,210,$i,$black); \r\n         imageline($im,210+$i,200,210,$i,$black); \r\n         imageline($im,210,210+$i,$i,200,$black); \r\n         imageline($im,210,410-$i,210+$i,200,$black); \r\n       } \r\n  imagePng($im); \r\n  ImageDestroy($im); \r\n?>", "attribution": "", "description": "MATH ART 2", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:32:05.049Z", "code_hash": "8fe1badc66790a9345022869301a979d52107bb2", "approved": true}}, {"pk": 127, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php \r\n// Call function myUniqID(int Id length, str Id prefix) \r\nmyUniqId(25,\"phpuser\"); \r\n\r\nfunction myUniqId($numStr,$strPrx) \r\n{ \r\n    srand((double)microtime()*rand(1000000,9999999)); // Seed random number generator \r\n    $arrChar=array(); // New array \r\n    $uId=$strPrx; // Write prefix in the uniq id \r\n     \r\n    for($i=65;$i<90;$i++) \r\n    { \r\n        array_push($arrChar,chr($i)); // Add A-Z to array \r\n        array_push($arrChar,strtolower(chr($i))); // Add a-z to array \r\n    } \r\n    for($i=48;$i<57;$i++) \r\n    { \r\n        array_push($arrChar,chr($i)); // Add 0-9 to array \r\n    } \r\n    for($i=0;$i<$numStr;$i++) \r\n    { \r\n        $uId.=$arrChar[rand(0,count($arrChar))]; // Write random picked chars in the uniq id \r\n    } \r\n    print \"Uniq ID is : $uId\"; // Print uniq ID on the screen \r\n} \r\n?>", "attribution": "", "description": "Unique ID Generator", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:32:50.406Z", "code_hash": "0cffdfc4380d7e8baf419e2f2d5af0b2a233bf53", "approved": true}}, {"pk": 128, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php \r\n\r\nfunction get_oldest_file($directory) { \r\n    if ($handle = opendir($directory)) { \r\n        while (false !== ($file = readdir($handle))) { \r\n            $files[] = $file; \r\n        } \r\n        foreach ($files as $val) { \r\n            if (is_file($directory.$val)) { \r\n                $file_date[$val] = filemtime($directory.$val); \r\n            } \r\n        } \r\n    } \r\n    closedir($handle); \r\n    asort($file_date, SORT_NUMERIC); \r\n    reset($file_date); \r\n    $oldest = key($file_date); \r\n    return $oldest; \r\n} \r\n// example: \r\necho get_oldest_file(\"the_way/to_the/directory\"); \r\n?>", "attribution": "", "description": "Get oldest file in directory", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:33:09.244Z", "code_hash": "254dbc835789b3594825a936f1dae3903748cd12", "approved": true}}, {"pk": 129, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<?php \r\nfunction SM_ucfirst_all ($text_string, $firstonly = x) \r\n    { \r\n    //optional flag to convert all words to lowercase first \r\n    if($firstonly != x) $text_string = strtolower($text_string); \r\n     \r\n    //use explode to create an array with one word in each item \r\n    $text_array = explode(\" \", $text_string) ; \r\n\r\n    //loop through the array \r\n    while(list($key,$val) = each($text_array)) { \r\n            $val = ucfirst ($val); \r\n            $new_text_string .= $val.' ' ; \r\n        } \r\n     \r\n        return $new_text_string; \r\n    }//end \r\n\r\n//function SM_ucfirst_all(string str [, string str]) \r\n//This funtion takes a string and converts the first letter of all words \r\n//to upper case \r\n// \r\n//e.g. $text = 'one TWO three four'; \r\n//print SM_ucfirst_all($text); \r\n//prints 'One TWO Three Four' \r\n// \r\n//Using the optional flag to convert all words to lower case and then \r\n//uppercase first letters \r\n//print SM_ucfirst_all($text,1); \r\n//prints 'One Two Three Four'", "attribution": "", "description": "A function to take a string and converts the first letter of all words to upper case", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:34:30.157Z", "code_hash": "4aa4f44b94daec1d576be552dfda7fe029df3448", "approved": true}}, {"pk": 130, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<? \r\nfunction cuttext($text, $maxChars = 20, $tail = \"\") \r\n{ \r\n    $arrWords = explode(\" \", $text); \r\n    $temp = \"\"; \r\n    for ($i=0; $i<count($arrWords); $i++){ \r\n        $temp .= ($i == 0 ? $arrWords[$i] : \" \" . $arrWords[$i]); \r\n        if (strlen($temp) < $maxChars){ \r\n            $returnStr = $temp; \r\n        } else { \r\n            if (strlen($text) > $maxChars) \r\n                return $returnStr.$tail; \r\n            else \r\n                return $returnStr; \r\n        } \r\n    } \r\n    return $returnStr; \r\n} \r\n\r\n************** EXAMPLE **************** \r\n\r\n$string = \"A quick brown fox jumps over the lazy dog.\"; \r\necho cuttext($string, 30, \"...\"); \r\n\r\n************** OUT PUT **************** \r\n?> \r\nA quick brown fox jumps over...", "attribution": "", "description": "A very useful function to display text on specified number of characters", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:35:03.033Z", "code_hash": "c691d9d94cdb1de3f9cb134722585e1b289c1b64", "approved": true}}, {"pk": 131, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "<? echo(sprintf(\"\\$ %.2f\",$amount)); ?> \r\n\r\nHere is a more robust function: \r\n\r\n<? function dispdollars($amount, $style) \r\n{ \r\n   //slam it! \r\n   $amount=doubleval($amount); \r\n\r\n   if ($amount>=0) \r\n      echo(sprintf(\"\\$ %.2f\",$amount); \r\n   else \r\n      if ($style==0) \r\n         echo(sprintf(\"-\\$ %.2f\",-$amount); \r\n      else \r\n         echo(\"<font color=red>\".sprintf(\"\\$ %.2f\",-$amount).\"</font>\"); \r\n\r\n} \r\n\r\nExample  : \r\n\r\n<html> \r\n<? \r\n   $amount=1.2345; \r\n\r\n   echo(\"the value $amount expressed in dollars is \".dispdollars($amount).\".\"); \r\n\r\n?> \r\n\r\n</html>", "attribution": "", "description": "Easy Display of Dollars", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:35:36.304Z", "code_hash": "3c9895ac6b3f8d052e2b4bd9e9e258ba2c6a2635", "approved": true}}, {"pk": 132, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "Left - ltrim() function \r\n<?php \r\n\r\n$text = \"\\t\\tThese are a few words :) ...  \"; \r\n$trimmed = ltrim($text); \r\n// $trimmed = \"These are a few words :) ...  \" \r\n$trimmed = ltrim($text,\" \\t.\"); \r\n// $trimmed = \"These are a few words :) ...  \" \r\n$clean = ltrim($binary,\"\\0x00..\\0x1F\"); \r\n// trim the ASCII control characters at the beginning of $binary \r\n// (from 0 to 31 inclusive) \r\n\r\n?> \r\n\r\nRight - rtrim() function \r\n<?php \r\n\r\n$text = \"\\t\\tThese are a few words :) ...  \"; \r\n$trimmed = rtrim($text); \r\n// $trimmed = \"\\t\\tThese are a few words :) ...\" \r\n$trimmed = rtrim($text,\" \\t.\"); \r\n// $trimmed = \"\\t\\tThese are a few words :)\" \r\n$clean = rtrim($binary,\"\\0x00..\\0x1F\"); \r\n// trim the ASCII control characters at the end of $binary \r\n// (from 0 to 31 inclusive) \r\n\r\n?>", "attribution": "", "description": "Trim Function", "language": 1, "lame": 0, "submitDate": "2013-03-19T06:36:02.419Z", "code_hash": "c6bf50ec230e1a3d4f4e23fa52ed6297a8e4f41c", "approved": true}}, {"pk": 133, "model": "lol.snippet", "fields": {"userName": "greg zakharov", "leet": 0, "code": "//with cycle (not recommended)\r\nfunction StrReverse(str) {\r\n  var res = '';\r\n  for (var i = str.length - 1; i >= 0; --i)\r\n    res += str.charAt(i);\r\n\r\n  return(res);\r\n}\r\n\r\nalert(StrReverse(\".gnirts a si sihT\"));\r\n\r\n//creating prototype\r\nString.prototype.reverse = function() {\r\n  return this.split('').reverse().join('');\r\n}\r\n\r\nalert(new String(\".gnirts a si sihT\").reverse());", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578464/ (MIT License)", "description": "Reversing string", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:36:58.322Z", "code_hash": "2d66074f676cbcd1cc97010e2af93637a53b1e66", "approved": true}}, {"pk": 134, "model": "lol.snippet", "fields": {"userName": "Isendrak Skatasmid", "leet": 0, "code": "//Triangle_Tooth_Gear.script\r\nfunction Triangle_Tooth_Gear(x,y,radius,tooth_size,tooth_count){\r\n\tphi=0;\r\n\tphi_plus=360.0/tooth_count;\r\n\tphi_plus=(2*3.1415926*phi_plus)/360;\r\n\ttooth=0;\r\n\tradius2=radius-tooth_size;\r\n\tvar gear = new QPolygonF();\r\n\tfor(tooth=0;tooth<tooth_count;tooth++){\r\n\t\tpx=radius*Math.cos(phi);\r\n\t\tpy=radius*Math.sin(phi);\r\n\t\tgear.append(new QPointF(x+px,y+py));\r\n\t\t\r\n\t\tpx=radius2*Math.cos(phi+(phi_plus/2));\r\n\t\tpy=radius2*Math.sin(phi+(phi_plus/2));\r\n\t\tgear.append(new QPointF(x+px,y+py));\r\n\t\t\r\n\t\tphi=phi+phi_plus;\r\n\t}\r\n\treturn world.createPolygon(gear);\r\n}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/578124/ (MIT License)", "description": "Triangle Tooth Gear for Physion", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:40:23.653Z", "code_hash": "1866d73a5ab63b83bd77a54452b68274afe9fca5", "approved": true}}, {"pk": 135, "model": "lol.snippet", "fields": {"userName": "Eric Promislow", "leet": 0, "code": "function getCurrentMethodName() {\r\n    var view = ko.views.manager.currentView;\r\n    var scimoz = view.scimoz;\r\n    var ciBuf = view.koDoc.ciBuf;\r\n    var x = ciBuf.curr_section_from_line(view.currentLine);\r\n    return x.title;\r\n}\r\n\r\nvar s;\r\ntry {\r\n    s = getCurrentMethodName();\r\n} catch(ex) {\r\n    s = \"Failed getCurrentMethodName: \" + ex;\r\n}\r\nalert(s);", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577532/ (MIT License)", "description": "Get the Name of the Current Method", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:41:02.305Z", "code_hash": "9468f0ab3b462ec529d40a3b5e930935e9d16cfc", "approved": true}}, {"pk": 136, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// Returns an object with parts of the URL address:\r\n// protocol, root domain name (wwithout 'www'), port, page path, file-name, search part, and hash\r\nfunction urlData(url) {\r\n  // object for data that will be returned\r\n  var redata = {protocol: '', domain: '', port: 80, path: '', file: '', search: '', hash: ''};\r\n\r\n  // creates an anchor element, and adds the url in \"href\" attribute\r\n  var a_elm  = document.createElement('a');\r\n  a_elm.href = url;\r\n\r\n  // adds URL data in redata object, and returns it\r\n  redata.protocol = a_elm.protocol.replace(':', '');\r\n  redata.domain = a_elm.hostname.replace('www.', '');\r\n  if(a_elm.port != '') redata.port = a_elm.port;\r\n  redata.path = a_elm.pathname;\r\n  if(a_elm.pathname.match(/[^\\/]+[\\.][a-z0-9]+$/i) != null) redata.file = a_elm.pathname.match(/[^\\/]+[\\.][a-z0-9]+$/i);\r\n  redata.search = a_elm.search.replace('?', '');\r\n  redata.hash = a_elm.hash.replace('#', '');\r\n  return redata;\r\n}", "attribution": "From: http://coursesweb.net/javascript/", "description": "Etract data from URL address.", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:41:45.429Z", "code_hash": "a06f108d2bd516171f455d489cd9ee81ef92dcbd", "approved": true}}, {"pk": 137, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// \"cls\" contains the class\r\nfunction delAddClass(dlcls, adcls, cls) {\r\n // from: http://coursesweb.net/javascript/\r\n  // get number of elements in array parameters\r\n  var nr_dlcls = dlcls.length;\r\n  var nr_adcls = adcls.length;\r\n\r\n  // traverse each array, delete \"class\" of \"dlcls\", add class to \"adcls\"\r\n  for(var i=0; i<nr_dlcls; i++) {\r\n    if(document.getElementById(dlcls[i])) document.getElementById(dlcls[i]).className = '';\r\n  }\r\n  for(var i=0; i<nr_adcls; i++) {\r\n    if(document.getElementById(adcls[i])) document.getElementById(adcls[i]).className = cls;\r\n  }\r\n}", "attribution": "", "description": "delete class from IDs in \"dlcls\" (array with IDs), add class to IDs in \"adcls\" (array with IDs)", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:42:10.839Z", "code_hash": "cbf2bde5e62151400968e2ece5b77626cc1f2f97", "approved": true}}, {"pk": 138, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// Function that replace token from string with equivalent variable value\r\n// Receives the string-template. Returns that string with variable names replaced\r\nfunction replaceStrVar(str){\r\n // JavaScript & jQuery Courses - http://coursesweb.net/javascript/\r\n  str = str.replace(/%(.*?)%/gi, function(a,b) {\r\n    // if token is an array item, else, is object property, or variable\r\n    if(b.match(/[a-z0-9_]+\\[[a-z0-9_]+\\]/i)) {\r\n      var arritm = b.match(/([a-z0-9_]+)\\[([a-z0-9_]+)\\]/i);      // gets an array with the matched items\r\n      return window[arritm[1]][arritm[2]];\r\n    }\r\n    else {\r\n      var voitm = b.split('.');\r\n      return (voitm.length == 2) ? window[voitm[0]][voitm[1]] : window[voitm[0]];\r\n    }\r\n  });\r\n\r\n  return str;\r\n}", "attribution": "", "description": "Function that replace token from string with equivalent variable value", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:42:35.890Z", "code_hash": "f2a1a087ab3b414d76efae816681a890d27bdc7c", "approved": true}}, {"pk": 139, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// trim, rtrim, ltrim\r\nfunction trim(str, chr) {\r\n  var rgxtrim = (!chr) ? new RegExp('^\\\\s+|\\\\s+$', 'g') : new RegExp('^'+chr+'+|'+chr+'+$', 'g');\r\n  return str.replace(rgxtrim, '');\r\n}\r\nfunction rtrim(str, chr) {\r\n  var rgxtrim = (!chr) ? new RegExp('\\\\s+$') : new RegExp(chr+'+$');\r\n  return str.replace(rgxtrim, '');\r\n}\r\nfunction ltrim(str, chr) {\r\n  var rgxtrim = (!chr) ? new RegExp('^\\\\s+') : new RegExp('^'+chr+'+');\r\n  return str.replace(rgxtrim, '');\r\n}", "attribution": "", "description": "Here's trim(), rtrim(), and ltrim() created manually in JavaScript:", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:42:58.395Z", "code_hash": "cb6c0a567fe984efedb744e28d16b9111adc8779", "approved": true}}, {"pk": 140, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "//array_map(callback, arr1) - returns an array containing all the elements of arr1 after applying the callback function to each one.\r\n\r\nfunction array_map(func, array) {\r\n  if(array.constructor.toString().match(/array/ig)) result = new Array();\r\n  else if(array.constructor.toString().match(/object/ig)) result = new Object();\r\n  if(result) {\r\n    for(var indice in array) {\r\n      result[indice] = eval(func+'('+array[indice]+')');\r\n    }\r\n    return result;\r\n  }\r\n}", "attribution": "", "description": "The array_map(), and array_search() functions are generally known and used in PHP. These functions are useful when working with arrays.", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:44:33.705Z", "code_hash": "c46e196ce69906559342e70fe9d346e37da40150", "approved": true}}, {"pk": 141, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "function strip_tags(str, allow) {\r\n  // making sure the allow arg is a string containing only tags in lowercase (<a><b><c>)\r\n  allow = (((allow || \"\") + \"\").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');\r\n\r\n  var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\r\n  var commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi;\r\n  return str.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {\r\n    return allow.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';\r\n  });\r\n}\r\n\r\nfunction stripslashes(str) {\r\n return str.replace(/\\\\'/g,'\\'').replace(/\\\"/g,'\"').replace(/\\\\\\\\/g,'\\\\').replace(/\\\\0/g,'\\0');\r\n}", "attribution": "", "description": "The strip_tags(), and stripslashes() functions are useful in PHP. These functions are useful when working with strings that contains HTML code, but JavaScript doesn't have such functions.", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:45:51.509Z", "code_hash": "ff25bef06a2065a67351ae4b911cc6e51cda9ebc", "approved": true}}, {"pk": 142, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "function s4() {\r\n  return Math.floor((1 + Math.random()) * 0x10000)\r\n             .toString(16)\r\n             .substring(1);\r\n};\r\n\r\nfunction guid() {\r\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n         s4() + '-' + s4() + s4() + s4();\r\n}", "attribution": "", "description": "guid", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:46:06.689Z", "code_hash": "fbc9051088289bda523f8bcec1613127cc6182b1", "approved": true}}, {"pk": 143, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "function capitaliseFirstLetter(string)\r\n{\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}", "attribution": "", "description": "capitaliseFirstLetter", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:46:21.537Z", "code_hash": "35d45d5c8cae9b97fa488366c6e4e77009aaa2f9", "approved": true}}, {"pk": 144, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "String.prototype.capitalize = function() {\r\n    return this.charAt(0).toUpperCase() + this.slice(1);\r\n}", "attribution": "", "description": "capitalize", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:46:36.030Z", "code_hash": "1c43a67c51a73fb3790c25cecbc9298651b77f4e", "approved": true}}, {"pk": 145, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "String.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g, '');};\r\n\r\nString.prototype.ltrim=function(){return this.replace(/^\\s+/,'');};\r\n\r\nString.prototype.rtrim=function(){return this.replace(/\\s+$/,'');};\r\n\r\nString.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,'').replace(/\\s+/g,' ');};", "attribution": "", "description": "String Functions", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:46:57.794Z", "code_hash": "2aa15eb36c391c500cd098cf5533cf9e22a820d0", "approved": true}}, {"pk": 146, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "function post_to_url(path, params, method) {\r\n    method = method || \"post\"; // Set method to post by default, if not specified.\r\n\r\n    // The rest of this code assumes you are not using a library.\r\n    // It can be made less wordy if you use one.\r\n    var form = document.createElement(\"form\");\r\n    form.setAttribute(\"method\", method);\r\n    form.setAttribute(\"action\", path);\r\n\r\n    for(var key in params) {\r\n        if(params.hasOwnProperty(key)) {\r\n            var hiddenField = document.createElement(\"input\");\r\n            hiddenField.setAttribute(\"type\", \"hidden\");\r\n            hiddenField.setAttribute(\"name\", key);\r\n            hiddenField.setAttribute(\"value\", params[key]);\r\n\r\n            form.appendChild(hiddenField);\r\n         }\r\n    }\r\n\r\n    document.body.appendChild(form);\r\n    form.submit();\r\n}", "attribution": "", "description": "Form post", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:47:21.532Z", "code_hash": "1e76bdd8cefd6e35e7cec2fe75fb9a0e7e25e052", "approved": true}}, {"pk": 147, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "/**\r\n * Returns a random number between min and max\r\n */\r\nfunction getRandomArbitary (min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\n/**\r\n * Returns a random integer between min and max\r\n * Using Math.round() will give you a non-uniform distribution!\r\n */\r\nfunction getRandomInt (min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}", "attribution": "Examples on the Mozilla Developer Center page", "description": "Random Numbers", "language": 4, "lame": 0, "submitDate": "2013-03-19T06:48:01.043Z", "code_hash": "21d16183976caf8730ba6223456657e510b7f317", "approved": true}}, {"pk": 148, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class _0001 {\r\n\r\n    public Object fn0() {\r\n        int sum = 0;\r\n        for (int i = 0; i < 1000; i++)\r\n            if (i % 3 == 0 || i % 5 == 0)\r\n                sum += i;\r\n        return sum;\r\n    }\r\n\r\n    public String[] solutions = new String[]{\"fn0\"};\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #1 - Multiples of 3 and 5", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:04:32.837Z", "code_hash": "fb8aa57138f18370e9320a5e605d9f99728fc4f5", "approved": true}}, {"pk": 149, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class _0002 {\r\n    public Object fn0() {\r\n        int f1 = 1;\r\n        int f2 = 2;\r\n        int sum = 0;\r\n        while (f2 < 4000000) {\r\n            if (f2 % 2 == 0)\r\n                sum += f2;\r\n            f2 = f1^f2;\r\n            f1 = f1^f2;\r\n            f2 = f1 + (f1^f2);\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public String[] solutions = new String[] { \"fn0\" };\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project euler # 2 - Even Fibonacci numbers", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:04:54.826Z", "code_hash": "b0010f4c90ba5e2e272981de758ef176bf1caf23", "approved": true}}, {"pk": 150, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class _0003 {\r\n    public Object fn0() {\r\n        long number = 600851475143L;\r\n        int divisor = 2;\r\n        while (number > 1) {\r\n            if (0 == (number % divisor)) {\r\n                number /= divisor;\r\n            } else {\r\n                divisor++;\r\n            }\r\n        }\r\n        return divisor;\r\n    }\r\n\r\n    public String[] solutions = new String[]{ \"fn0\" };\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #3 - Largest prime factor of 600851475143", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:05:20.603Z", "code_hash": "6752fb098db97a96ae15103c554b46fc90894c99", "approved": true}}, {"pk": 151, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class _0004 {\r\n    public Object fn0() {\r\n        int max = 0;\r\n        for (int i = 100; i < 1000; i++) {\r\n            for (int j = 100; j < 1000; j++) {\r\n                String s = Integer.toString(i * j);\r\n                for (int a = 0, b = s.length()-1; a < b; a++, b--) {\r\n                    if (s.charAt(a) != s.charAt(b)) break;\r\n                    if (a == b || a+1 >= b-1) {\r\n                        if (i * j > max) {\r\n                            max = i * j;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n\r\n    public String[] solutions = new String[]{ \"fn0\" };\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #4 - Largest palindrome product", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:05:41.382Z", "code_hash": "b859816dfd513774ed235f56786a54a165fd93d0", "approved": true}}, {"pk": 152, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class _0005 {\r\n    \r\n    public long gcd(long a, long b) {\r\n        if (b == 0)\r\n            return a;\r\n        return gcd(b, a % b);\r\n    }\r\n    public long lcm(long a, long b) {\r\n        return (a * b) / gcd(a, b);\r\n    }\r\n\r\n    public Object fn0() {\r\n        long val = 1;\r\n        for (int i = 2; i < 21; i++) {\r\n            val = lcm(val, i);\r\n        }\r\n        return val;\r\n    }\r\n\r\n    public String[] solutions = new String[]{ \"fn0\" };\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #5 - Smallest multiple", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:06:05.518Z", "code_hash": "120446034b553ae4033ae2f93d16edd597eb5454", "approved": true}}, {"pk": 153, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class _0006 {\r\n\r\n    public Object fn0() {\r\n        int i;\r\n        long sumofsq = 0;\r\n        long sum = 0;\r\n        for (i = 1; i < 101; i++) {\r\n            sumofsq += (i * i);\r\n            sum += i;\r\n        }\r\n        return sum * sum - sumofsq;\r\n    }\r\n\r\n    public String[] solutions = new String[]{\"fn0\"};\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #6 - Sum square difference", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:06:23.729Z", "code_hash": "796db22fac0362d8ca941522a1009768761e36da", "approved": true}}, {"pk": 154, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class _0007 {\r\n    public Object fn0() {\r\n        PrimeGenerator pg = new PrimeGenerator();\r\n        return pg.get(10000);\r\n    }\r\n\r\n    public String[] solutions = new String[]{ \"fn0\" };\r\n}", "attribution": "https://github.com/tristan/project-euler-code", "description": "Project Euler #7 - 10001st prime", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:06:43.021Z", "code_hash": "f3618ba0cf88cf2bab979173cfa48d0ad5a62750", "approved": true}}, {"pk": 155, "model": "lol.snippet", "fields": {"userName": "John Hurliman", "leet": 0, "code": "public static class StringExtensions\r\n{\r\n    public static string Replace(this String str, char[] chars, string replacement)\r\n    {\r\n        StringBuilder output = new StringBuilder(str.Length);\r\n\r\n        for (int i = 0; i < str.Length; i++)\r\n        {\r\n            char c = str[i];\r\n\r\n            bool replace = false;\r\n            for (int j = 0; j < chars.Length; j++)\r\n            {\r\n                if (chars[j] == c)\r\n                {\r\n                    replace = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (replace)\r\n                output.Append(replacement);\r\n            else\r\n                output.Append(c);\r\n        }\r\n\r\n        return output.ToString();\r\n    }\r\n}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577516/ (MIT License)", "description": "Takes a string and replaces all characters matching a given array with a given string", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:07:47.636Z", "code_hash": "02465555e1bbc38a257a278e1a409f872cb13108", "approved": true}}, {"pk": 156, "model": "lol.snippet", "fields": {"userName": "st0le", "leet": 0, "code": "package org.mechaevil.util.Conversions;\r\n\r\n/**\r\n * @author st0le\r\n *\r\n */\r\npublic class NumberToWordsConverter {\r\n\r\n\tfinal private  static String[] units = {\"Zero\",\"One\",\"Two\",\"Three\",\"Four\",\r\n\t\t\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\",\"Ten\",\r\n\t\t\"Eleven\",\"Twelve\",\"Thirteen\",\"Fourteen\",\"Fifteen\",\r\n\t\t\"Sixteen\",\"Seventeen\",\"Eighteen\",\"Nineteen\"};\r\n\tfinal private static String[] tens = {\"\",\"\",\"Twenty\",\"Thirty\",\"Forty\",\"Fifty\",\r\n\t\t\"Sixty\",\"Seventy\",\"Eighty\",\"Ninety\"};\r\n\r\n\r\n\tpublic static String convert(Integer i) {\r\n\t\t//\r\n\t\tif( i < 20)  return units[i];\r\n\t\tif( i < 100) return tens[i/10] + ((i % 10 > 0)? \" \" + convert(i % 10):\"\");\r\n\t\tif( i < 1000) return units[i/100] + \" Hundred\" + ((i % 100 > 0)?\" and \" + convert(i % 100):\"\");\r\n\t\tif( i < 1000000) return convert(i / 1000) + \" Thousand \" + ((i % 1000 > 0)? \" \" + convert(i % 1000):\"\") ;\r\n\t\treturn convert(i / 1000000) + \" Million \" + ((i % 1000000 > 0)? \" \" + convert(i % 1000000):\"\") ;\r\n\t}\r\n}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577312/ (MIT License)", "description": "Number To Words Converter (100 => One Hundred)", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:08:31.421Z", "code_hash": "b3078c1acf350ebc3c6ea2433427aa8025450cdd", "approved": true}}, {"pk": 157, "model": "lol.snippet", "fields": {"userName": "st0le", "leet": 0, "code": "public class RomanNumeral {\r\n\tfinal static char symbol[] = {'M','D','C','L','X','V','I'};\r\n\tfinal static int   value[] = {1000,500,100,50,10,5,1};\r\n\r\n\tpublic static int valueOf(String roman)\t{\r\n\t\troman = roman.toUpperCase();\r\n\t\tif(roman.length() == 0) return 0;\r\n\t\tfor(int i = 0; i < symbol.length; i++) {\r\n\t\t\tint pos = roman.indexOf(symbol[i]) ;\r\n\t\t\tif(pos >= 0)\r\n\t\t\t\treturn value[i] - valueOf(roman.substring(0,pos)) + valueOf(roman.substring(pos+1));\r\n\t\t}\r\n\t\tthrow new IllegalArgumentException(\"Invalid Roman Symbol.\");\r\n\t}\r\n\r\n\tprivate static int[]    numbers = { 1000,  900,  500,  400,  100,   90,  50,   40,   10,    9,    5,    4,    1 };\r\n\tprivate static String[] letters = { \"M\",  \"CM\",  \"D\",  \"CD\", \"C\",  \"XC\",\"L\",  \"XL\",  \"X\",  \"IX\", \"V\",  \"IV\", \"I\" };\r\n\r\n\tpublic static String convertToRoman(int N)\t{\r\n\t\tString roman = \"\";\r\n\t\tfor (int i = 0; i < numbers.length; i++) {\r\n\t\t\twhile (N >= numbers[i]) {\r\n\t\t\t\troman += letters[i];\r\n\t\t\t\tN -= numbers[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn roman;\r\n\t}\r\n}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577313/ (MIT License)", "description": "Converts Roman Symbols to Integers and back.", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:10:30.949Z", "code_hash": "6d385544ae90b39fc94bef59a0a2c26c40cf2e1f", "approved": true}}, {"pk": 158, "model": "lol.snippet", "fields": {"userName": "st0le", "leet": 0, "code": "public static String nextLexographicWord(String txt)\r\n\t{\r\n\t\tchar [] letters = txt.toCharArray();\r\n\t\tint l = letters .length - 1;\r\n\t\twhile(l >= 0)\r\n\t\t{\r\n\t\t\tif(letters[l] == 'z')\r\n\t\t\t\tletters[l] = 'a';\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tletters[l]++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tl--;\r\n\t\t}\r\n\t\tif(l < 0) return 'a' + (new String(letters));\r\n\t\treturn new String(letters); \r\n\t}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577315/ (MIT License)", "description": "Generates next lexographically occuring word, say \"aaa\" -> \"aab\" -> \"aac\"", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:11:05.441Z", "code_hash": "a44f1eb882dce7ab8f9a8b30fadd45e5adba38c3", "approved": true}}, {"pk": 159, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "import java.text.DateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.SimpleTimeZone;\r\n\r\npublic class Test {\r\n  public static void main(String[] args) {\r\n    Calendar calendar = Calendar.getInstance();\r\n    if (calendar.isWeekDateSupported()) {\r\n      System.out.println(\"Number of weeks in this year: \"\r\n          + calendar.getWeeksInWeekYear());\r\n      System.out.println(\"Current week number: \"\r\n          + calendar.get(Calendar.WEEK_OF_YEAR));\r\n    }\r\n\r\n    calendar.setWeekDate(2012, 16, 3);\r\n    System.out.println(DateFormat.getDateTimeInstance(DateFormat.LONG,\r\n        DateFormat.LONG).format(calendar.getTime()));\r\n\r\n  }\r\n}", "attribution": "", "description": "Number of weeks", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:11:41.467Z", "code_hash": "eb6cf1f9a6733664411221386773344d8fc2145b", "approved": true}}, {"pk": 160, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class SquareandMultiply {\r\n\r\n\tpublic long sqmulExcution(int basis, int expont, int mod) {\r\n\r\n\t\t// n = exponentiation, m= modular, x= basis, u = the new modular result\r\n\t\t// of the new left moved bit.\r\n\t\tString n_binar = Integer.toBinaryString(expont);\r\n\r\n\t\tlong res = 1;\r\n\t\tint n_binar_length = n_binar.length();\r\n\t\tint count = 0;\r\n\r\n\t\twhile (n_binar_length > 0) {\r\n\r\n\t\t\tres = (long) Math.pow(res, 2) % mod;\r\n\t\t\tif (n_binar.charAt(count) == '1')\r\n\t\t\t\tres = (res * basis) % mod;\r\n\r\n\t\t\tcount++;\r\n\t\t\tn_binar_length--;\r\n\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n}", "attribution": "ttps://github.com/jcryptool/crypto/", "description": "Square and Multiply", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:12:59.189Z", "code_hash": "b610b4612a6ccbd703038363029eb6415679f794", "approved": true}}, {"pk": 161, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "import java.util.*;\r\n\r\nclass EntryComparator implements Comparator<Entry> {\r\n  public int compare(Entry e1, Entry e2) {\r\n    int value1 = e1.getCategory().compareTo(e2.getCategory());\r\n    if(value1 == 0){\r\n      return e1.getDateString2().compareTo(e2.getDateString2());\r\n    }\r\n    else {\r\n      return value1;\r\n    }\r\n  }\r\n}", "attribution": "https://github.com/jaredborner/tracker/", "description": "Compare two dates", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:13:30.635Z", "code_hash": "d68e904f6af33a824d950c9b322bc6400c4b427f", "approved": true}}, {"pk": 162, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class BinarySearch {\r\n\r\n    // precondition: array a[] is sorted\r\n    public static int rank(int key, int[] a) {\r\n        int lo = 0;\r\n        int hi = a.length - 1;\r\n        while (lo <= hi) {\r\n            // Key is in a[lo..hi] or not present.\r\n            int mid = lo + (hi - lo) / 2;\r\n            if      (key < a[mid]) hi = mid - 1;\r\n            else if (key > a[mid]) lo = mid + 1;\r\n            else return mid;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] whitelist = In.readInts(args[0]);\r\n\r\n        Arrays.sort(whitelist);\r\n\r\n        // read key; print if not in whitelist\r\n        while (!StdIn.isEmpty()) {\r\n            int key = StdIn.readInt();\r\n            if (rank(key, whitelist) == -1)\r\n                StdOut.println(key);\r\n        }\r\n    }\r\n}", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Binary Search", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:14:05.897Z", "code_hash": "f3672fa46ff6b0b09fb8ca6d6c65149d1e85efaa", "approved": true}}, {"pk": 163, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class RandomSeq { \r\n    public static void main(String[] args) {\r\n\r\n        // command-line arguments\r\n        int N = Integer.parseInt(args[0]);\r\n\r\n        if (args.length == 1) {\r\n            // generate and print N numbers between 0.0 and 1.0\r\n            for (int i = 0; i < N; i++) {\r\n                double x = StdRandom.uniform();\r\n                StdOut.println(x);\r\n            }\r\n        }\r\n\r\n        else if (args.length == 3) {\r\n            double lo = Double.parseDouble(args[1]);\r\n            double hi = Double.parseDouble(args[2]);\r\n\r\n            // generate and print N numbers between lo and hi\r\n            for (int i = 0; i < N; i++) {\r\n                double x = StdRandom.uniform(lo, hi);\r\n                StdOut.printf(\"%.2f\\n\", x);\r\n            }\r\n        }\r\n\r\n        else {\r\n            throw new RuntimeException(\"Invalid number of arguments\");\r\n        }\r\n    }\r\n}", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Random Sequence", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:14:40.408Z", "code_hash": "7b6ef20fbc62e45e682f5ea643b018a5a2fcc481", "approved": true}}, {"pk": 164, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class Average { \r\n    public static void main(String[] args) { \r\n        int count = 0;       // number input values\r\n        double sum = 0.0;    // sum of input values\r\n\r\n        // read data and compute statistics\r\n        while (!StdIn.isEmpty()) {\r\n            double value = StdIn.readDouble();\r\n            sum += value;\r\n            count++;\r\n        }\r\n\r\n        // compute the average\r\n        double average = sum / count;\r\n\r\n        // print results\r\n        StdOut.println(\"Average is \" + average);\r\n    }\r\n}", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Average", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:15:16.624Z", "code_hash": "7a9a47388034fad73677400ccb8845ee3ddaa60a", "approved": true}}, {"pk": 165, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class Cat { \r\n\r\n    public static void main(String[] args) { \r\n        Out out = new Out(args[args.length - 1]);\r\n        for (int i = 0; i < args.length - 1; i++) {\r\n            In in = new In(args[i]);\r\n            String s = in.readAll();\r\n            out.println(s);\r\n            in.close();\r\n        }\r\n        out.close();\r\n    }\r\n\r\n}", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Concatenate", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:16:10.913Z", "code_hash": "b806ee8226a5a8adafbfc07fe894e2aae43f9674", "approved": true}}, {"pk": 166, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class Shuffle { \r\n    public static void main(String[] args) {\r\n\r\n        // read in the data\r\n        String[] a = StdIn.readAll().split(\"\\\\s+\");\r\n        int N = a.length;\r\n\r\n        // shuffle\r\n        for (int i = 0; i < N; i++) {\r\n            // int from remainder of deck\r\n            int r = i + (int) (Math.random() * (N - i));\r\n            String swap = a[r];\r\n            a[r] = a[i];\r\n            a[i] = swap;\r\n        }\r\n\r\n        // print permutation\r\n        for (int i = 0; i < N; i++)\r\n            StdOut.println(a[i]);\r\n    }\r\n}", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Shuffle", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:16:30.905Z", "code_hash": "a3573182200dd9de9ae05e3362bf393fc0cc80e4", "approved": true}}, {"pk": 167, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class StaticSETofInts {\r\n    private int[] a;\r\n    public StaticSETofInts(int[] keys) {\r\n        // defensive copy\r\n        a = new int[keys.length];\r\n        for (int i = 0; i < keys.length; i++)\r\n            a[i] = keys[i];\r\n\r\n        Arrays.sort(a);\r\n    }\r\n\r\n    public boolean contains(int key) {\r\n        return rank(key) != -1;\r\n    }\r\n\r\n    // Binary search.\r\n    public int rank(int key) {\r\n        int lo = 0;\r\n        int hi = a.length - 1;\r\n        while (lo <= hi) {\r\n            // Key is in a[lo..hi] or not present.\r\n            int mid = lo + (hi - lo) / 2;\r\n            if      (key < a[mid]) hi = mid - 1;\r\n            else if (key > a[mid]) lo = mid + 1;\r\n            else return mid;\r\n        }\r\n        return -1;\r\n    }\r\n}", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Set", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:17:21.387Z", "code_hash": "5b1b5313662d68f5c7124f3f06e03771afd5291b", "approved": true}}, {"pk": 168, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class Stopwatch { \r\n\r\n    private final long start;\r\n\r\n   /**\r\n     * Create a stopwatch object.\r\n     */\r\n    public Stopwatch() {\r\n        start = System.currentTimeMillis();\r\n    } \r\n\r\n\r\n   /**\r\n     * Return elapsed time (in seconds) since this object was created.\r\n     */\r\n    public double elapsedTime() {\r\n        long now = System.currentTimeMillis();\r\n        return (now - start) / 1000.0;\r\n    }\r\n\r\n}", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Stopwatch", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:17:40.558Z", "code_hash": "4e6997ca83c3c36a50b4b9ab7f6a55820917c6a1", "approved": true}}, {"pk": 169, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// selection sort\r\n    public static void sort(Comparable[] a) {\r\n        int N = a.length;\r\n        for (int i = 0; i < N; i++) {\r\n            int min = i;\r\n            for (int j = i+1; j < N; j++) {\r\n                if (less(a[j], a[min])) min = j;\r\n            }\r\n            exch(a, i, min);\r\n            assert isSorted(a, 0, i);\r\n        }\r\n        assert isSorted(a);\r\n    }", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Selection Sort", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:18:07.723Z", "code_hash": "1cf4fa265ff41f3b7cef5e202f0f43af55c8a20b", "approved": true}}, {"pk": 170, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// bottom-up mergesort\r\n    public static void sort(Comparable[] a) {\r\n        int N = a.length;\r\n        Comparable[] aux = new Comparable[N];\r\n        for (int n = 1; n < N; n = n+n) {\r\n            for (int i = 0; i < N-n; i += n+n) {\r\n                int lo = i;\r\n                int m  = i+n-1;\r\n                int hi = Math.min(i+n+n-1, N-1);\r\n                merge(a, aux, lo, m, hi);\r\n            }\r\n        }\r\n        assert isSorted(a);\r\n    }", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Bottom-up Mergesort", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:18:32.983Z", "code_hash": "1a988947b9b2a9f5c647784b155b20975af84a93", "approved": true}}, {"pk": 171, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// quicksort the array a[] using 3-way partitioning\r\n    public static void sort(Comparable[] a) {\r\n        sort(a, 0, a.length - 1);\r\n        assert isSorted(a);\r\n    }\r\n\r\n    // quicksort the subarray a[lo .. hi] using 3-way partitioning\r\n    private static void sort(Comparable[] a, int lo, int hi) { \r\n        if (hi <= lo) return;\r\n        int lt = lo, gt = hi;\r\n        Comparable v = a[lo];\r\n        int i = lo;\r\n        while (i <= gt) {\r\n            int cmp = a[i].compareTo(v);\r\n            if      (cmp < 0) exch(a, lt++, i++);\r\n            else if (cmp > 0) exch(a, i, gt--);\r\n            else              i++;\r\n        }\r\n\r\n        // a[lo..lt-1] < v = a[lt..gt] < a[gt+1..hi]. \r\n        sort(a, lo, lt-1);\r\n        sort(a, gt+1, hi);\r\n        assert isSorted(a, lo, hi);\r\n    }", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Quicksort", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:18:55.323Z", "code_hash": "721817e7783be071339c6cc79058f26ba3f28230", "approved": true}}, {"pk": 172, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public class FrequencyCounter {\r\n\r\n    public static void main(String[] args) {\r\n        int distinct = 0, words = 0;\r\n        int minlen = Integer.parseInt(args[0]);\r\n        ST<String, Integer> st = new ST<String, Integer>();\r\n\r\n        // compute frequency counts\r\n        while (!StdIn.isEmpty()) {\r\n            String key = StdIn.readString();\r\n            if (key.length() < minlen) continue;\r\n            words++;\r\n            if (st.contains(key)) { st.put(key, st.get(key) + 1); }\r\n            else                  { st.put(key, 1); distinct++; }\r\n        }\r\n\r\n        // find a key with the highest frequency count\r\n        String max = \"\";\r\n        st.put(max, 0);\r\n        for (String word : st.keys()) {\r\n            if (st.get(word) > st.get(max))\r\n                max = word;\r\n        }\r\n\r\n        StdOut.println(max + \" \" + st.get(max));\r\n        StdOut.println(\"distinct = \" + distinct);\r\n        StdOut.println(\"words  = \" + words);\r\n    }\r\n}", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Frequency Counter", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:19:18.277Z", "code_hash": "7540f93c6cb0dec1db605d0f53d7a0d567a667b8", "approved": true}}, {"pk": 173, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "// check for exact match\r\n    public int search(String txt) {\r\n        int N = txt.length(); \r\n        if (N < M) return N;\r\n        long txtHash = hash(txt, M); \r\n\r\n        // check for match at offset 0\r\n        if ((patHash == txtHash) && check(txt, 0))\r\n            return 0;\r\n\r\n        // check for hash match; if hash match, check for exact match\r\n        for (int i = M; i < N; i++) {\r\n            // Remove leading digit, add trailing digit, check for match. \r\n            txtHash = (txtHash + Q - RM*txt.charAt(i-M) % Q) % Q; \r\n            txtHash = (txtHash*R + txt.charAt(i)) % Q; \r\n\r\n            // match\r\n            int offset = i - M + 1;\r\n            if ((patHash == txtHash) && check(txt, offset))\r\n                return offset;\r\n        }\r\n\r\n        // no match\r\n        return N;\r\n    }", "attribution": "http://algs4.cs.princeton.edu/code/", "description": "Search Text", "language": 6, "lame": 0, "submitDate": "2013-03-19T21:19:41.427Z", "code_hash": "c6fdd866baefd7093920579f05fee141d4ae3ea6", "approved": true}}, {"pk": 174, "model": "lol.snippet", "fields": {"userName": "John Hurliman", "leet": 0, "code": "private static Vector3 SurfaceNormal(Vector3 c1, Vector3 c2, Vector3 c3)\r\n{\r\n    Vector3 edge1 = new Vector3(c2.X - c1.X, c2.Y - c1.Y, c2.Z - c1.Z);\r\n    Vector3 edge2 = new Vector3(c3.X - c1.X, c3.Y - c1.Y, c3.Z - c1.Z);\r\n\r\n    Vector3 normal = Vector3.Cross(edge1, edge2);\r\n    normal.Normalize();\r\n\r\n    return normal;\r\n}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577348/ (MIT License)", "description": "Calculates a surface normal given three position vectors in clockwise order.", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:20:47.215Z", "code_hash": "082438839a53638bf1e3bca4c02c0c5b102877a7", "approved": true}}, {"pk": 175, "model": "lol.snippet", "fields": {"userName": "John Hurliman", "leet": 0, "code": "private static Bitmap ResizeImage(Image image, int width, int height)\r\n{\r\n    Bitmap result = new Bitmap(width, height);\r\n\r\n    using (Graphics graphics = Graphics.FromImage(result))\r\n    {\r\n        graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;\r\n        graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;\r\n        graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;\r\n        graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;\r\n\r\n        graphics.DrawImage(image, 0, 0, result.Width, result.Height);\r\n    }\r\n\r\n    return result;\r\n}", "attribution": "From ActiveState Code: http://code.activestate.com/recipes/577347/ (MIT License)", "description": "C# Image Resize", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:21:17.990Z", "code_hash": "16bfbfdf9efa39dd60a0519f4e91019bb1ce37b0", "approved": true}}, {"pk": 176, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "using System;\r\n\r\nclass Program\r\n{\r\n    public static int Fibonacci(int n)\r\n    {\r\n\tint a = 0;\r\n\tint b = 1;\r\n\t// In N steps compute Fibonacci sequence iteratively.\r\n\tfor (int i = 0; i < n; i++)\r\n\t{\r\n\t    int temp = a;\r\n\t    a = b;\r\n\t    b = temp + b;\r\n\t}\r\n\treturn a;\r\n    }\r\n\r\n    static void Main()\r\n    {\r\n\tfor (int i = 0; i < 15; i++)\r\n\t{\r\n\t    Console.WriteLine(Fibonacci(i));\r\n\t}\r\n    }\r\n}", "attribution": "", "description": "Fibonacci Sequence", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:21:36.704Z", "code_hash": "b0a59fd2c307b228387db58fdde8fd6315fef7e8", "approved": true}}, {"pk": 177, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public void Linq40() \r\n    { \r\n        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; \r\n      \r\n        var numberGroups = \r\n            from n in numbers \r\n            group n by n % 5 into g \r\n            select new { Remainder = g.Key, Numbers = g }; \r\n      \r\n        foreach (var g in numberGroups) \r\n        { \r\n            Console.WriteLine(\"Numbers with a remainder of {0} when divided by 5:\", g.Remainder); \r\n            foreach (var n in g.Numbers) \r\n            { \r\n                Console.WriteLine(n); \r\n            } \r\n        } \r\n    }", "attribution": "MSDN Sample Code", "description": "This sample uses group by to partition a list of numbers by their remainder when divided by 5.", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:22:04.166Z", "code_hash": "42bb5427d6248e0dacd9fb1a46afee9d91f96c86", "approved": true}}, {"pk": 178, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public void Linq41() \r\n    { \r\n        string[] words = { \"blueberry\", \"chimpanzee\", \"abacus\", \"banana\", \"apple\", \"cheese\" }; \r\n      \r\n        var wordGroups = \r\n            from w in words \r\n            group w by w[0] into g \r\n            select new { FirstLetter = g.Key, Words = g }; \r\n      \r\n        foreach (var g in wordGroups) \r\n        { \r\n            Console.WriteLine(\"Words that start with the letter '{0}':\", g.FirstLetter); \r\n            foreach (var w in g.Words) \r\n            { \r\n                Console.WriteLine(w); \r\n            } \r\n        } \r\n    }", "attribution": "MSDN Sample Code", "description": "This sample uses group by to partition a list of words by their first letter.", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:22:29.893Z", "code_hash": "5bc975e3d9a0df932395a51cd4f6178b05fe9749", "approved": true}}, {"pk": 179, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public void Linq42() \r\n    { \r\n        List<Product> products = GetProductList(); \r\n      \r\n        var orderGroups = \r\n            from p in products \r\n            group p by p.Category into g \r\n            select new { Category = g.Key, Products = g }; \r\n      \r\n        ObjectDumper.Write(orderGroups, 1); \r\n    }", "attribution": "MSDN Sample Code", "description": "This sample uses group by to partition a list of products by category.", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:22:53.266Z", "code_hash": "d83691f0085d9278ed786901e4a6bf815134a02b", "approved": true}}, {"pk": 180, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public Task<bool> ValidateUrlAsync(string url)\r\n{\r\n    var tcs = new TaskCompletionSource<bool>();\r\n    var request = (HttpWebRequest)WebRequest.Create(url);\r\n    try\r\n    {\r\n        request.BeginGetResponse(iar =>\r\n        {\r\n            HttpWebResponse response = null;\r\n            try\r\n            {\r\n                response = (HttpWebResponse)request.EndGetResponse(iar);\r\n                tcs.SetResult(response.StatusCode == HttpStatusCode.OK);\r\n            }\r\n            catch(Exception exc) { tcs.SetException(exc); }\r\n            finally { if (response != null) response.Close(); }\r\n        }, null);\r\n    }\r\n    catch(Exception exc) { tcs.SetException(exc); }\r\n    return tsc.Task;\r\n \r\n}", "attribution": "", "description": "ValidateUrlAsync", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:23:11.824Z", "code_hash": "e62de0cb56bbf93008b4cbbaddd74a94be8cf469", "approved": true}}, {"pk": 181, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "private void RunQueries()\r\n{\r\n    this.DisableSearch();\r\n    Task.Factory.StartNew(() =>\r\n    {\r\n        this.BeginTiming();\r\n        foreach (var query in this.CarQueries)\r\n        {\r\n            if (this.searchOperation.Token.IsCancellationRequested)\r\n            {\r\n                return;\r\n            }\r\n \r\n            query.Run(this.cars, true);\r\n        };\r\n        this.EndSequentialTiming();\r\n    }, this.searchOperation.Token).ContinueWith(_ => this.EnableSearch());\r\n}", "attribution": "", "description": "RunQueries", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:23:26.520Z", "code_hash": "b6de25d7d36c832716518040022697d3a2436f60", "approved": true}}, {"pk": 182, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public static void Send(Socket socket, byte[] buffer, int offset, int size, int timeout)\r\n{\r\n  int startTickCount = Environment.TickCount;\r\n  int sent = 0;  // how many bytes is already sent\r\n  do {\r\n    if (Environment.TickCount > startTickCount + timeout)\r\n      throw new Exception(\"Timeout.\");\r\n    try {\r\n      sent += socket.Send(buffer, offset + sent, size - sent, SocketFlags.None);\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n      if (ex.SocketErrorCode == SocketError.WouldBlock ||\r\n          ex.SocketErrorCode == SocketError.IOPending ||\r\n          ex.SocketErrorCode == SocketError.NoBufferSpaceAvailable)\r\n      {\r\n        // socket buffer is probably full, wait and try again\r\n        Thread.Sleep(30);\r\n      }\r\n      else\r\n        throw ex;  // any serious error occurr\r\n    }\r\n  } while (sent < size);\r\n}", "attribution": "", "description": "Socket Send", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:23:53.227Z", "code_hash": "1fd6a82c20d554e07c99b4ad97866f1e45e24def", "approved": true}}, {"pk": 183, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "public static void Receive(Socket socket, byte[] buffer, int offset, int size, int timeout)\r\n{\r\n  int startTickCount = Environment.TickCount;\r\n  int received = 0;  // how many bytes is already received\r\n  do {\r\n    if (Environment.TickCount > startTickCount + timeout)\r\n      throw new Exception(\"Timeout.\");\r\n    try {\r\n      received += socket.Receive(buffer, offset + received, size - received, SocketFlags.None);\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n      if (ex.SocketErrorCode == SocketError.WouldBlock ||\r\n          ex.SocketErrorCode == SocketError.IOPending ||\r\n          ex.SocketErrorCode == SocketError.NoBufferSpaceAvailable)\r\n      {\r\n        // socket buffer is probably empty, wait and try again\r\n        Thread.Sleep(30);\r\n      }\r\n      else\r\n        throw ex;  // any serious error occurr\r\n    }\r\n  } while (received < size);\r\n}", "attribution": "", "description": "Socket Receive", "language": 8, "lame": 0, "submitDate": "2013-03-19T21:24:10.216Z", "code_hash": "1564a6dc7fff1d3393a2c137592fe05613ba0e7e", "approved": true}}, {"pk": 184, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "sieve = sieveget [3,5..]\r\n   where sieveget (x:xs) = x : sieveget (filter (\\y -> y `rem` x /= 0) xs)", "attribution": "", "description": "Sieve of Eratosthenes", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:24:38.850Z", "code_hash": "020cc5c71e9cfbe4d081543d3f82779d69743548", "approved": true}}, {"pk": 185, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "quicksort [] = []\r\n quicksort (x:xs) = quicksort small ++ (x : quicksort large)\r\n   where small = [y | y <- xs, y <= x]\r\n         large = [y | y <- xs, y > x]", "attribution": "", "description": "Quicksort", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:24:57.554Z", "code_hash": "57582d0e1ee08ad2211db80b398f882c05b8b5e7", "approved": true}}, {"pk": 186, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "qsortOneLine s = case s of{[]->[];(x:xs)->qsortOneLine [y | y<-xs, y<x] ++ x : qsortOneLine [y | y<-xs, y>=x]}", "attribution": "", "description": "Quicksort", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:25:09.937Z", "code_hash": "1b2d5efbbcf59a7bdcb31fa1009290401ca845d0", "approved": true}}, {"pk": 187, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "bottles :: Integer -> [String]\r\nbottles n | n > 0     = countdown n\r\n          | otherwise = error \"Not even a single bottle of beer?  You must have a drinking problem...\"\r\n  where countdown :: Integer -> [String]\r\n      countdown n = do i <- [n,n-1..0]\r\n\t                 let b    = bottleCount i\r\n\t                     b1   = bottleCount (i-1)\r\n\t                     next = nextAction i\r\n\t                 [(b ++ \" on the wall, \" ++ b ++ \".\"),\r\n\t                  (next ++ \", \" ++ b1 ++ \" on the wall.\"),\r\n\t                  \"\"]\r\n\r\n        bottleCount 0 = \"No more bottles of beer\"\r\n\tbottleCount 1 = \"1 bottle of beer\"\r\n\tbottleCount n | n > 0 = show n ++ \" bottles of beer\"\r\n\tbottleCount _ = show n ++ \" bottles of beer\"\r\n        nextAction 0 = \"Go to the store, buy some more\"\r\n\tnextAction _ = \"Take one down, pass it around\"\r\n\r\nmain :: IO ()\r\nmain = mapM_ putStrLn (bottles 99)", "attribution": "http://en.literateprograms.org/index.php?title=Special:DownloadCode/99_Bottles_of_Beer_(Haskell)", "description": "99 Bottles of Beer", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:27:23.220Z", "code_hash": "c7de6f3789b67964d1db39eaf568fd9af63798df", "approved": true}}, {"pk": 188, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "module Ackermann\r\n    where\r\n\r\nackermann 0 n = n+1\r\nackermann (m+1) 0 = ackermann m 1\r\nackermann (m+1) (n+1) = ackermann m (ackermann (m+1) n)\r\nackermann _ _ = 0", "attribution": "http://en.literateprograms.org/index.php?title=Special:DownloadCode/Ackermann_function_(Haskell)", "description": "Ackermann Function", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:28:04.735Z", "code_hash": "127dfdd5782cdd16783c37787f55b1200dffe70f", "approved": true}}, {"pk": 189, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "import Data.Ratio\r\nimport Data.List\r\n\r\nbernoulli :: Integer -> Ratio Integer\r\nbernoulli = genericIndex bernoulli_table\r\nbernoulli_table = map bernoulli' [0..]\r\n \r\nbernoulli' :: Integer -> Ratio Integer\r\nbernoulli' 0 = 1\r\nbernoulli' 1 = -1 % 2\r\nbernoulli' n | odd n          = 0\r\n             | n `mod` 6 == 0 = let val = (n+3) % 3 - bernoulliA n (n `div` 6) in\r\n                                  val / fromIntegral (choose (n+3) n)\r\n             | n `mod` 6 == 2 = let val = (n+3) % 3 - bernoulliA n ((n-2) `div` 6) in\r\n                                  val / fromIntegral (choose (n+3) n)\r\n             | n `mod` 6 == 4 = let val = -(n+3) % 6 - bernoulliA n ((n-4) `div` 6) in\r\n                                  val / fromIntegral (choose (n+3) n)\r\n--This can be sped up by not re-calculating the binary coefficient every time or\r\n--memoizing that function.\r\nbernoulliA :: Integer -> Integer -> Ratio Integer\r\nbernoulliA n m = sum (map foo [1..m])\r\n  where foo j = fromIntegral (choose (n+3) (n-6*j)) * bernoulli (n-6*j)\r\nchoose :: (Integral a) => a -> a -> a\r\nchoose n r = product [n-r'+1..n] `div` product [1..r']\r\n  where r' = min r (n-r)", "attribution": "http://en.literateprograms.org/index.php?title=Special:DownloadCode/Bernoulli_numbers_(Haskell)", "description": "Bernoulli Numbers", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:28:35.687Z", "code_hash": "a05cfc0b2d51eb940bcfdadccb7d96a0b1645af9", "approved": true}}, {"pk": 190, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "csort :: (Eq a) => [a] -> [a] -> [a]\r\ncsort seq dom =\r\n  do x <- dom\r\n     filter (x ==) seq\r\n\r\n\r\nmain :: IO ()\r\nmain = do putStrLn \"counting sort of 3.1415926535897931\"\r\n          putStrLn $ csort \"3.1415926535897931\" \"0123456789\"\r\n          putStrLn \"counting sort of 2.71828182846\"\r\n          putStrLn $ csort \"2.71828182846\" \"0123456789\"", "attribution": "http://en.literateprograms.org/Counting_sort_(Haskell)", "description": "Counting Sort", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:28:59.459Z", "code_hash": "f66452d838dce4030352eb1cf02cdbf126f11211", "approved": true}}, {"pk": 191, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "queens :: Int -> [[Int]]\r\nqueens n = foldM f [] [1..n] where\r\n    f rows _ = [row : rows |\r\n                row <- [1..n],\r\n                safeAddition rows row 1]\r\n\r\nsafeAddition :: [Int] -> Int -> Int -> Bool\r\nsafeAddition [] _ _ = True\r\nsafeAddition (r:rows) row i =\r\n   row /= r &&\r\n   abs (row - r) /= i &&\r\n   safeAddition rows row (i + 1)", "attribution": "http://en.literateprograms.org/Eight_Queens_puzzle_(Haskell)", "description": "Eight Queens Puzzle", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:29:23.690Z", "code_hash": "0d4e981a4fc86d722de4a6e81b48c0a15ee3526d", "approved": true}}, {"pk": 192, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "fib :: Integer -> Integer\r\nfib n\r\n    | n == 0  = 0\r\n    | n == 1  = 1\r\n    | n  > 1  = fib (n-1) + fib (n-2)\r\n    \r\n    \r\nfib :: Int -> Integer\r\nfib n = fibs !! n\r\n  where\r\n    fibs = 0 : 1 : zipWith (+) fibs (tail fibs)", "attribution": "http://en.literateprograms.org/Fibonacci_numbers_(Haskell)", "description": "Fibonacci Sequence", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:29:46.448Z", "code_hash": "0800ac58167464df1e1d7828c945131f0dc74c81", "approved": true}}, {"pk": 193, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "import System.Random\r\n\r\nshuffle :: [a] -> IO [a]\r\nshuffle l = shuffleInner l []\r\n  where\r\n    shuffleInner [] acc = return acc\r\n    shuffleInner l acc =\r\n      do k <- randomRIO (0, length l - 1)\r\n         let (lead, x:xs) = splitAt k l\r\n         shuffleInner (lead ++ xs) (x:acc)", "attribution": "http://en.literateprograms.org/Fisher-Yates_shuffle_(Haskell)", "description": "Fisher-Yates Shuffle", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:31:11.349Z", "code_hash": "de26c6d4ab217717796c90f5b13727ca35f326f5", "approved": true}}, {"pk": 194, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "insertion_sort :: (a -> a -> Bool) -> [a] -> [a]\r\n\r\ninsertion_sort pred []     = []\r\ninsertion_sort pred (x:xs) = insert pred x (insertion_sort pred xs)\r\ninsert :: (a -> a -> Bool) -> a -> [a] -> [a]\r\ninsert pred x [] = [x]\r\ninsert pred x (y:ys)\r\n  | pred x y = (x:y:ys)\r\n  | otherwise = y:(insert pred x ys)", "attribution": "http://en.literateprograms.org/Insertion_sort_(Haskell)", "description": "Insertion Sort", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:31:38.161Z", "code_hash": "6dc502e4de03b00f35cc0d1b03ecf04980dcc82a", "approved": true}}, {"pk": 195, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "import System.Environment\r\n\r\njacobi 1 _ = 1\r\njacobi 2 n = case n `mod` 8 of\r\n               1 -> 1\r\n               3 -> -1\r\n               5 -> -1\r\n               7 -> 1\r\njacobi 0 _ = 0\r\njacobi a n | even a         = jacobi 2 n * jacobi (a `div` 2)  n\r\n\r\n           | a >= n         = jacobi (a `mod` n) n\r\n           | a `mod` 4 == 3 &&\r\n             n `mod` 4 == 3 = - jacobi n a\r\n           | otherwise      = jacobi n a\r\n\r\nmain = do args <- getArgs\r\n          let a = read (args !! 0)\r\n              b = read (args !! 1)\r\n          print (jacobi a b)", "attribution": "http://en.literateprograms.org/Jacobi_Symbol_(Haskell)", "description": "Jacobi Symbol", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:32:10.653Z", "code_hash": "14c9a5e5f292a9c1e9fd227ac776a6f3becb594e", "approved": true}}, {"pk": 196, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "rr :: Int -> Int -> [Int]\r\nrr 0 _ = []\r\nrr n k = k `mod` n : rr (n-1) (k `div` n)\r\n\r\ndfr :: [Int] -> [Int]\r\ndfr = foldr (\\x rs -> x : [r + (if x <= r then 1 else 0) | r <- rs]) []\r\npar :: [Int] -> Int\r\npar rs = sum rs `mod` 2\r\nperm :: [a] -> Int -> [a]\r\nperm xs k = [xs !! i | i <- dfr (rr (length xs) k)]\r\nmain = mapM_ (\\k -> putStrLn (perm \"perm\" k ++ \" \"\r\n                              ++ show (par (rr 4 k))))\r\n             [0..23]", "attribution": "http://en.literateprograms.org/Kth_permutation_(Haskell)", "description": "Kth Permutation", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:32:37.698Z", "code_hash": "d25166743e79eaf1266e1b35b3fd7eda5ffec5e2", "approved": true}}, {"pk": 197, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "module Markov where\r\nimport List\r\ntype Rule = (Word, Word, Bool)\r\ntype Algor = [Rule]\r\ntype Word = [Char]\r\nsuccessor = [(\"aL\", \"La\", False),\r\n             (\"a0\", \"0a\", False),\r\n             (\"a\" , \"b\" , False),\r\n             (\"Lb\", \"b0\", False),\r\n             (\"0b\", \"L\" , True ),\r\n             (\"b\" , \"L\" , True ),\r\n             (\"\"  , \"a\" , False)]\r\ncontains :: Word -> Word -> Bool\r\ncontains s@(x:xs) sub = sub `isPrefixOf` s || xs `contains` sub\r\ncontains [] _ = False\r\nfindRule :: Algor -> Word -> Maybe Rule\r\nfindRule a w = find (\\(l,_,_) -> w `contains` l) a\r\napplyRule :: Rule -> Word -> Word\r\napplyRule (l,r,b) s@(x:xs) | l `isPrefixOf` s = r ++ (s \\\\ l)\r\n                           | otherwise        = x : applyRule (l,r,b) xs\r\napplyAlg :: Algor -> Word -> Maybe (Word, Bool)\r\napplyAlg a w = case findRule a w of \r\n               Just r@(_,_,b) -> Just (applyRule r w, b)\r\n               Nothing        -> Nothing\r\nrun :: Algor -> Word -> [Word]\r\nrun a w = case applyAlg a w of\r\n          Just (w', False) -> w : run a w'  -- Normal rule was applied\r\n          Just (w', True)  -> [w, w']       -- Halting rule was applied\r\n          Nothing          -> [w]           -- No rule was applied", "attribution": "http://en.literateprograms.org/Markov_algorithm_simulator_(Haskell)", "description": "Markov Algorithm Simulator", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:33:17.979Z", "code_hash": "fc00fc407e8a1ed9003519d73169bbff1f0bb036", "approved": true}}, {"pk": 198, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "split :: [a] -> ([a],[a])\r\nsplit xs = go xs xs where\r\n  go (x:xs) (_:_:zs) = (x:us,vs) where (us,vs)=go xs zs\r\n  go    xs   _       = ([],xs)\r\nmerge :: (a -> a -> Bool) -> [a] -> [a] -> [a]\r\nmerge pred xs []         = xs\r\nmerge pred [] ys         = ys\r\nmerge pred (x:xs) (y:ys) =\r\n  case pred x y of\r\n    True  -> x: merge pred xs (y:ys)\r\n    False -> y: merge pred (x:xs) ys\r\n\r\nmergesort :: (a -> a -> Bool) -> [a] -> [a]\r\nmergesort pred []   = []\r\nmergesort pred [x]  = [x]\r\nmergesort pred xs = merge pred (mergesort pred xs1) (mergesort pred xs2)\r\n  where\r\n    (xs1,xs2) = split xs", "attribution": "http://en.literateprograms.org/Merge_sort_(Haskell)", "description": "Merge Sort", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:33:47.532Z", "code_hash": "8af525c1af5a2156534e0ef58a36a18ca5a2604d", "approved": true}}, {"pk": 199, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "arccot x unity =\r\n    arccot' x unity 0 start 1 1\r\n      where start = unity `div` x\r\n            arccot' x unity sum xpower n sign | xpower `div` n == 0 = sum\r\n                                              | otherwise           =\r\n                arccot' x unity (sum + sign*term) (xpower `div` (x*x)) (n+2) (-sign)\r\n                  where term = xpower `div` n\r\n\r\nmachin_pi digits = pi' `div` (10 ^ 10)\r\n                     where unity = 10 ^ (digits+10)\r\n                           pi' = 4 * (4 * arccot 5 unity - arccot 239 unity)", "attribution": "http://en.literateprograms.org/Pi_with_Machin's_formula_(Haskell)", "description": "PI with Machin's Formula", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:34:18.462Z", "code_hash": "ec9bc008a58cc952a5bfd369b8824cfa3ae0b57e", "approved": true}}, {"pk": 200, "model": "lol.snippet", "fields": {"userName": "Anonymous", "leet": 0, "code": "module Main\r\n  where\r\n\r\n\r\nminus (x:xs) (y:ys) = case (compare x y) of \r\n          LT -> x : minus  xs  (y:ys)\r\n          EQ ->     minus  xs     ys \r\n          GT ->     minus (x:xs)  ys\r\nminus  xs     _     = xs\r\nunion (x:xs) (y:ys) = case (compare x y) of \r\n          LT -> x : union  xs  (y:ys)\r\n          EQ -> x : union  xs     ys \r\n          GT -> y : union (x:xs)  ys\r\nunion  xs     ys    = xs ++ ys\r\n\r\nprimes, nonprimes :: [Integer]\r\nprimes    = 2 : 3 : (minus [5, 7 ..] nonprimes) \r\nnonprimes = foldr1 f [[p*p, p*p+2*p ..] | p <- tail primes]\r\n  where \r\n    f (x:xt) ys = x : (union xt ys)\r\n\r\nmain :: IO ()\r\nmain = do\r\n  print $ show (primes !! 10000)", "attribution": "http://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)", "description": "Sieve of Eratosthenes", "language": 18, "lame": 0, "submitDate": "2013-03-19T21:34:40.441Z", "code_hash": "b4ab238dd5e18e5d7ac3d65b01b71b3249b5fbc6", "approved": true}}]